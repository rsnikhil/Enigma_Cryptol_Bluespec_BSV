//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul 16 22:09:11 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire par_blocks_1_start_wire$whas,
       par_blocks_1_start_wire_1$whas,
       par_blocks_1_state_set_pw$whas,
       par_blocks_1_state_set_pw_1$whas,
       par_blocks_start_wire$whas,
       par_blocks_start_wire_1$whas,
       par_blocks_state_set_pw$whas,
       par_blocks_state_set_pw_1$whas,
       par_running$whas,
       par_running_1$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register par_blocks_1_start_reg
  reg par_blocks_1_start_reg;
  wire par_blocks_1_start_reg$D_IN, par_blocks_1_start_reg$EN;

  // register par_blocks_1_start_reg_2
  reg par_blocks_1_start_reg_2;
  wire par_blocks_1_start_reg_2$D_IN, par_blocks_1_start_reg_2$EN;

  // register par_blocks_1_state_can_overlap
  reg par_blocks_1_state_can_overlap;
  wire par_blocks_1_state_can_overlap$D_IN, par_blocks_1_state_can_overlap$EN;

  // register par_blocks_1_state_can_overlap_1
  reg par_blocks_1_state_can_overlap_1;
  wire par_blocks_1_state_can_overlap_1$D_IN,
       par_blocks_1_state_can_overlap_1$EN;

  // register par_blocks_1_state_fired
  reg par_blocks_1_state_fired;
  wire par_blocks_1_state_fired$D_IN, par_blocks_1_state_fired$EN;

  // register par_blocks_1_state_fired_2
  reg par_blocks_1_state_fired_2;
  wire par_blocks_1_state_fired_2$D_IN, par_blocks_1_state_fired_2$EN;

  // register par_blocks_1_state_mkFSMstate
  reg [2 : 0] par_blocks_1_state_mkFSMstate;
  reg [2 : 0] par_blocks_1_state_mkFSMstate$D_IN;
  wire par_blocks_1_state_mkFSMstate$EN;

  // register par_blocks_1_state_mkFSMstate_1
  reg [2 : 0] par_blocks_1_state_mkFSMstate_1;
  reg [2 : 0] par_blocks_1_state_mkFSMstate_1$D_IN;
  wire par_blocks_1_state_mkFSMstate_1$EN;

  // register par_blocks_start_reg
  reg par_blocks_start_reg;
  wire par_blocks_start_reg$D_IN, par_blocks_start_reg$EN;

  // register par_blocks_start_reg_2
  reg par_blocks_start_reg_2;
  wire par_blocks_start_reg_2$D_IN, par_blocks_start_reg_2$EN;

  // register par_blocks_state_can_overlap
  reg par_blocks_state_can_overlap;
  wire par_blocks_state_can_overlap$D_IN, par_blocks_state_can_overlap$EN;

  // register par_blocks_state_can_overlap_1
  reg par_blocks_state_can_overlap_1;
  wire par_blocks_state_can_overlap_1$D_IN, par_blocks_state_can_overlap_1$EN;

  // register par_blocks_state_fired
  reg par_blocks_state_fired;
  wire par_blocks_state_fired$D_IN, par_blocks_state_fired$EN;

  // register par_blocks_state_fired_2
  reg par_blocks_state_fired_2;
  wire par_blocks_state_fired_2$D_IN, par_blocks_state_fired_2$EN;

  // register par_blocks_state_mkFSMstate
  reg [2 : 0] par_blocks_state_mkFSMstate;
  reg [2 : 0] par_blocks_state_mkFSMstate$D_IN;
  wire par_blocks_state_mkFSMstate$EN;

  // register par_blocks_state_mkFSMstate_1
  reg [2 : 0] par_blocks_state_mkFSMstate_1;
  reg [2 : 0] par_blocks_state_mkFSMstate_1$D_IN;
  wire par_blocks_state_mkFSMstate_1$EN;

  // register rg_j1
  reg [31 : 0] rg_j1;
  wire [31 : 0] rg_j1$D_IN;
  wire rg_j1$EN;

  // register rg_j2
  reg [31 : 0] rg_j2;
  wire [31 : 0] rg_j2$D_IN;
  wire rg_j2$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [4 : 0] state_mkFSMstate;
  reg [4 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule hw_ModelEnigma
  wire [7 : 0] hw_ModelEnigma$request_put, hw_ModelEnigma$response_get;
  wire hw_ModelEnigma$EN_request_put,
       hw_ModelEnigma$EN_reset,
       hw_ModelEnigma$EN_response_get,
       hw_ModelEnigma$RDY_request_put,
       hw_ModelEnigma$RDY_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_f_init_l66c21,
       CAN_FIRE_RL_action_f_init_l69c21,
       CAN_FIRE_RL_action_f_init_l80c21,
       CAN_FIRE_RL_action_f_init_l83c21,
       CAN_FIRE_RL_action_f_update_l66c21,
       CAN_FIRE_RL_action_f_update_l69c21,
       CAN_FIRE_RL_action_f_update_l80c21,
       CAN_FIRE_RL_action_f_update_l83c21,
       CAN_FIRE_RL_action_l38c32,
       CAN_FIRE_RL_action_l41c18,
       CAN_FIRE_RL_action_l44c18,
       CAN_FIRE_RL_action_l52c18,
       CAN_FIRE_RL_action_l60c18,
       CAN_FIRE_RL_action_l63c32,
       CAN_FIRE_RL_action_l64c18,
       CAN_FIRE_RL_action_l67c38,
       CAN_FIRE_RL_action_l69c91,
       CAN_FIRE_RL_action_l74c18,
       CAN_FIRE_RL_action_l77c32,
       CAN_FIRE_RL_action_l78c18,
       CAN_FIRE_RL_action_l81c38,
       CAN_FIRE_RL_action_l83c94,
       CAN_FIRE_RL_action_l88c18,
       CAN_FIRE_RL_actionpar_run_l65c18,
       CAN_FIRE_RL_actionpar_run_l79c18,
       CAN_FIRE_RL_actionpar_start_l65c18,
       CAN_FIRE_RL_actionpar_start_l79c18,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l37c15,
       CAN_FIRE_RL_idle_l66c21,
       CAN_FIRE_RL_idle_l66c21_1,
       CAN_FIRE_RL_idle_l69c21,
       CAN_FIRE_RL_idle_l69c21_1,
       CAN_FIRE_RL_idle_l80c21,
       CAN_FIRE_RL_idle_l80c21_1,
       CAN_FIRE_RL_idle_l83c21,
       CAN_FIRE_RL_idle_l83c21_1,
       CAN_FIRE_RL_par_blocks_1_restart,
       CAN_FIRE_RL_par_blocks_1_restart_1,
       CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update,
       CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update_1,
       CAN_FIRE_RL_par_blocks_1_state_every,
       CAN_FIRE_RL_par_blocks_1_state_every_1,
       CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update,
       CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update_1,
       CAN_FIRE_RL_par_blocks_1_state_handle_abort,
       CAN_FIRE_RL_par_blocks_1_state_handle_abort_1,
       CAN_FIRE_RL_par_blocks_restart,
       CAN_FIRE_RL_par_blocks_restart_1,
       CAN_FIRE_RL_par_blocks_start_reg__dreg_update,
       CAN_FIRE_RL_par_blocks_start_reg__dreg_update_1,
       CAN_FIRE_RL_par_blocks_state_every,
       CAN_FIRE_RL_par_blocks_state_every_1,
       CAN_FIRE_RL_par_blocks_state_fired__dreg_update,
       CAN_FIRE_RL_par_blocks_state_fired__dreg_update_1,
       CAN_FIRE_RL_par_blocks_state_handle_abort,
       CAN_FIRE_RL_par_blocks_state_handle_abort_1,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_25,
       CAN_FIRE___me_check_26,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_30,
       CAN_FIRE___me_check_31,
       CAN_FIRE___me_check_32,
       CAN_FIRE___me_check_33,
       CAN_FIRE___me_check_35,
       CAN_FIRE___me_check_36,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_43,
       CAN_FIRE___me_check_45,
       CAN_FIRE___me_check_46,
       WILL_FIRE_RL_action_f_init_l66c21,
       WILL_FIRE_RL_action_f_init_l69c21,
       WILL_FIRE_RL_action_f_init_l80c21,
       WILL_FIRE_RL_action_f_init_l83c21,
       WILL_FIRE_RL_action_f_update_l66c21,
       WILL_FIRE_RL_action_f_update_l69c21,
       WILL_FIRE_RL_action_f_update_l80c21,
       WILL_FIRE_RL_action_f_update_l83c21,
       WILL_FIRE_RL_action_l38c32,
       WILL_FIRE_RL_action_l41c18,
       WILL_FIRE_RL_action_l44c18,
       WILL_FIRE_RL_action_l52c18,
       WILL_FIRE_RL_action_l60c18,
       WILL_FIRE_RL_action_l63c32,
       WILL_FIRE_RL_action_l64c18,
       WILL_FIRE_RL_action_l67c38,
       WILL_FIRE_RL_action_l69c91,
       WILL_FIRE_RL_action_l74c18,
       WILL_FIRE_RL_action_l77c32,
       WILL_FIRE_RL_action_l78c18,
       WILL_FIRE_RL_action_l81c38,
       WILL_FIRE_RL_action_l83c94,
       WILL_FIRE_RL_action_l88c18,
       WILL_FIRE_RL_actionpar_run_l65c18,
       WILL_FIRE_RL_actionpar_run_l79c18,
       WILL_FIRE_RL_actionpar_start_l65c18,
       WILL_FIRE_RL_actionpar_start_l79c18,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l37c15,
       WILL_FIRE_RL_idle_l66c21,
       WILL_FIRE_RL_idle_l66c21_1,
       WILL_FIRE_RL_idle_l69c21,
       WILL_FIRE_RL_idle_l69c21_1,
       WILL_FIRE_RL_idle_l80c21,
       WILL_FIRE_RL_idle_l80c21_1,
       WILL_FIRE_RL_idle_l83c21,
       WILL_FIRE_RL_idle_l83c21_1,
       WILL_FIRE_RL_par_blocks_1_restart,
       WILL_FIRE_RL_par_blocks_1_restart_1,
       WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update,
       WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update_1,
       WILL_FIRE_RL_par_blocks_1_state_every,
       WILL_FIRE_RL_par_blocks_1_state_every_1,
       WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update,
       WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update_1,
       WILL_FIRE_RL_par_blocks_1_state_handle_abort,
       WILL_FIRE_RL_par_blocks_1_state_handle_abort_1,
       WILL_FIRE_RL_par_blocks_restart,
       WILL_FIRE_RL_par_blocks_restart_1,
       WILL_FIRE_RL_par_blocks_start_reg__dreg_update,
       WILL_FIRE_RL_par_blocks_start_reg__dreg_update_1,
       WILL_FIRE_RL_par_blocks_state_every,
       WILL_FIRE_RL_par_blocks_state_every_1,
       WILL_FIRE_RL_par_blocks_state_fired__dreg_update,
       WILL_FIRE_RL_par_blocks_state_fired__dreg_update_1,
       WILL_FIRE_RL_par_blocks_state_handle_abort,
       WILL_FIRE_RL_par_blocks_state_handle_abort_1,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_25,
       WILL_FIRE___me_check_26,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_30,
       WILL_FIRE___me_check_31,
       WILL_FIRE___me_check_32,
       WILL_FIRE___me_check_33,
       WILL_FIRE___me_check_35,
       WILL_FIRE___me_check_36,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_43,
       WILL_FIRE___me_check_45,
       WILL_FIRE___me_check_46;

  // inputs to muxes for submodule ports
  reg [7 : 0] MUX_hw_ModelEnigma$request_put_1__VAL_1,
	      MUX_hw_ModelEnigma$request_put_1__VAL_2;
  wire [31 : 0] MUX_rg_j1$write_1__VAL_1, MUX_rg_j2$write_1__VAL_1;
  wire MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1,
       MUX_par_blocks_1_state_mkFSMstate_1$write_1__SEL_1,
       MUX_par_blocks_state_mkFSMstate$write_1__SEL_1,
       MUX_par_blocks_state_mkFSMstate_1$write_1__SEL_1,
       MUX_rg_j1$write_1__SEL_1,
       MUX_rg_j2$write_1__SEL_1;

  // remaining internal signals
  wire NOT_par_blocks_1_abort_1_whas__12_34_OR_NOT_pa_ETC___d364,
       NOT_par_blocks_1_abort_whas__4_6_OR_NOT_par_bl_ETC___d344,
       NOT_par_blocks_abort_1_whas__3_05_OR_NOT_par_b_ETC___d373,
       NOT_par_blocks_abort_whas__5_7_OR_NOT_par_bloc_ETC___d353,
       abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d392,
       par_blocks_1_abort_1_whas__12_AND_par_blocks_1_ETC___d319,
       par_blocks_1_abort_whas__4_AND_par_blocks_1_ab_ETC___d237,
       par_blocks_abort_1_whas__3_AND_par_blocks_abor_ETC___d326,
       par_blocks_abort_whas__5_AND_par_blocks_abort__ETC___d244,
       par_running_1_whas__60_AND_par_running_1_wget__ETC___d276,
       par_running_1_whas__60_AND_par_running_1_wget__ETC___d301,
       par_running_whas__67_AND_par_running_wget__68__ETC___d186,
       par_running_whas__67_AND_par_running_wget__68__ETC___d217,
       rg_j1_05_SLT_27___d206,
       rg_j2_74_SLT_27___d175;

  // submodule hw_ModelEnigma
  mkModelEnigma hw_ModelEnigma(.CLK(CLK),
			       .RST_N(RST_N),
			       .request_put(hw_ModelEnigma$request_put),
			       .EN_reset(hw_ModelEnigma$EN_reset),
			       .EN_request_put(hw_ModelEnigma$EN_request_put),
			       .EN_response_get(hw_ModelEnigma$EN_response_get),
			       .RDY_reset(),
			       .RDY_request_put(hw_ModelEnigma$RDY_request_put),
			       .response_get(hw_ModelEnigma$response_get),
			       .RDY_response_get(hw_ModelEnigma$RDY_response_get));

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l41c18
  assign CAN_FIRE_RL_action_l41c18 = state_mkFSMstate == 5'd1 ;
  assign WILL_FIRE_RL_action_l41c18 = CAN_FIRE_RL_action_l41c18 ;

  // rule RL_action_l44c18
  assign CAN_FIRE_RL_action_l44c18 = state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_action_l44c18 = CAN_FIRE_RL_action_l44c18 ;

  // rule RL_action_l52c18
  assign CAN_FIRE_RL_action_l52c18 = state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_action_l52c18 = CAN_FIRE_RL_action_l52c18 ;

  // rule RL_action_l60c18
  assign CAN_FIRE_RL_action_l60c18 = state_mkFSMstate == 5'd4 ;
  assign WILL_FIRE_RL_action_l60c18 = CAN_FIRE_RL_action_l60c18 ;

  // rule RL_action_l63c32
  assign CAN_FIRE_RL_action_l63c32 = state_mkFSMstate == 5'd5 ;
  assign WILL_FIRE_RL_action_l63c32 = CAN_FIRE_RL_action_l63c32 ;

  // rule RL_action_l64c18
  assign CAN_FIRE_RL_action_l64c18 = state_mkFSMstate == 5'd6 ;
  assign WILL_FIRE_RL_action_l64c18 = CAN_FIRE_RL_action_l64c18 ;

  // rule RL_actionpar_start_l65c18
  assign CAN_FIRE_RL_actionpar_start_l65c18 =
	     par_blocks_1_abort_whas__4_AND_par_blocks_1_ab_ETC___d237 &&
	     par_blocks_abort_whas__5_AND_par_blocks_abort__ETC___d244 &&
	     state_mkFSMstate == 5'd7 ;
  assign WILL_FIRE_RL_actionpar_start_l65c18 =
	     CAN_FIRE_RL_actionpar_start_l65c18 ;

  // rule RL_action_l74c18
  assign CAN_FIRE_RL_action_l74c18 =
	     par_blocks_1_abort_whas__4_AND_par_blocks_1_ab_ETC___d237 &&
	     par_blocks_abort_whas__5_AND_par_blocks_abort__ETC___d244 &&
	     (state_mkFSMstate == 5'd8 || state_mkFSMstate == 5'd9) ;
  assign WILL_FIRE_RL_action_l74c18 = CAN_FIRE_RL_action_l74c18 ;

  // rule RL_action_l77c32
  assign CAN_FIRE_RL_action_l77c32 = state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_action_l77c32 = CAN_FIRE_RL_action_l77c32 ;

  // rule RL_action_l78c18
  assign CAN_FIRE_RL_action_l78c18 = state_mkFSMstate == 5'd12 ;
  assign WILL_FIRE_RL_action_l78c18 = CAN_FIRE_RL_action_l78c18 ;

  // rule RL_actionpar_start_l79c18
  assign CAN_FIRE_RL_actionpar_start_l79c18 =
	     par_blocks_1_abort_1_whas__12_AND_par_blocks_1_ETC___d319 &&
	     par_blocks_abort_1_whas__3_AND_par_blocks_abor_ETC___d326 &&
	     state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_actionpar_start_l79c18 =
	     CAN_FIRE_RL_actionpar_start_l79c18 ;

  // rule RL_action_l88c18
  assign CAN_FIRE_RL_action_l88c18 =
	     par_blocks_1_abort_1_whas__12_AND_par_blocks_1_ETC___d319 &&
	     par_blocks_abort_1_whas__3_AND_par_blocks_abor_ETC___d326 &&
	     (state_mkFSMstate == 5'd14 || state_mkFSMstate == 5'd15) ;
  assign WILL_FIRE_RL_action_l88c18 = CAN_FIRE_RL_action_l88c18 ;

  // rule RL_actionpar_run_l65c18
  assign CAN_FIRE_RL_actionpar_run_l65c18 =
	     (NOT_par_blocks_1_abort_whas__4_6_OR_NOT_par_bl_ETC___d344 ||
	      NOT_par_blocks_abort_whas__5_7_OR_NOT_par_bloc_ETC___d353) &&
	     (state_mkFSMstate == 5'd8 || state_mkFSMstate == 5'd9) ;
  assign WILL_FIRE_RL_actionpar_run_l65c18 =
	     CAN_FIRE_RL_actionpar_run_l65c18 ;

  // rule RL_action_l69c91
  assign CAN_FIRE_RL_action_l69c91 =
	     hw_ModelEnigma$RDY_response_get && par_running$whas &&
	     rg_j2_74_SLT_27___d175 &&
	     (par_blocks_1_state_mkFSMstate == 3'd1 ||
	      par_blocks_1_state_mkFSMstate == 3'd3) ;
  assign WILL_FIRE_RL_action_l69c91 = CAN_FIRE_RL_action_l69c91 ;

  // rule RL_action_l67c38
  assign CAN_FIRE_RL_action_l67c38 =
	     hw_ModelEnigma$RDY_request_put && par_running$whas &&
	     rg_j1_05_SLT_27___d206 &&
	     (par_blocks_state_mkFSMstate == 3'd1 ||
	      par_blocks_state_mkFSMstate == 3'd3) ;
  assign WILL_FIRE_RL_action_l67c38 = CAN_FIRE_RL_action_l67c38 ;

  // rule RL_actionpar_run_l79c18
  assign CAN_FIRE_RL_actionpar_run_l79c18 =
	     (NOT_par_blocks_1_abort_1_whas__12_34_OR_NOT_pa_ETC___d364 ||
	      NOT_par_blocks_abort_1_whas__3_05_OR_NOT_par_b_ETC___d373) &&
	     (state_mkFSMstate == 5'd14 || state_mkFSMstate == 5'd15) ;
  assign WILL_FIRE_RL_actionpar_run_l79c18 =
	     CAN_FIRE_RL_actionpar_run_l79c18 ;

  // rule RL_action_l83c94
  assign CAN_FIRE_RL_action_l83c94 =
	     hw_ModelEnigma$RDY_response_get && par_running_1$whas &&
	     rg_j2_74_SLT_27___d175 &&
	     (par_blocks_1_state_mkFSMstate_1 == 3'd1 ||
	      par_blocks_1_state_mkFSMstate_1 == 3'd3) ;
  assign WILL_FIRE_RL_action_l83c94 = CAN_FIRE_RL_action_l83c94 ;

  // rule RL_action_l81c38
  assign CAN_FIRE_RL_action_l81c38 =
	     hw_ModelEnigma$RDY_request_put && par_running_1$whas &&
	     rg_j1_05_SLT_27___d206 &&
	     (par_blocks_state_mkFSMstate_1 == 3'd1 ||
	      par_blocks_state_mkFSMstate_1 == 3'd3) ;
  assign WILL_FIRE_RL_action_l81c38 = CAN_FIRE_RL_action_l81c38 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d392 &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_action_l38c32
  assign CAN_FIRE_RL_action_l38c32 =
	     start_wire$whas &&
	     (state_mkFSMstate == 5'd0 || state_mkFSMstate == 5'd17) ;
  assign WILL_FIRE_RL_action_l38c32 = CAN_FIRE_RL_action_l38c32 ;

  // rule RL_idle_l37c15
  assign CAN_FIRE_RL_idle_l37c15 =
	     !start_wire$whas && state_mkFSMstate == 5'd17 ;
  assign WILL_FIRE_RL_idle_l37c15 = CAN_FIRE_RL_idle_l37c15 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d392 &&
	     !start_reg &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d392 &&
	     !start_reg ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_restart
  assign CAN_FIRE_RL_par_blocks_restart =
	     par_blocks_start_reg && !par_blocks_state_fired ;
  assign WILL_FIRE_RL_par_blocks_restart = CAN_FIRE_RL_par_blocks_restart ;

  // rule RL_idle_l66c21
  assign CAN_FIRE_RL_idle_l66c21 =
	     !rg_j1_05_SLT_27___d206 && !par_blocks_start_wire$whas &&
	     par_blocks_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_idle_l66c21 = CAN_FIRE_RL_idle_l66c21 ;

  // rule RL_idle_l66c21_1
  assign CAN_FIRE_RL_idle_l66c21_1 =
	     !rg_j1_05_SLT_27___d206 && !par_blocks_start_wire$whas &&
	     par_blocks_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_idle_l66c21_1 = CAN_FIRE_RL_idle_l66c21_1 ;

  // rule RL_action_f_update_l80c21
  assign CAN_FIRE_RL_action_f_update_l80c21 =
	     par_running_1$whas && par_blocks_state_mkFSMstate_1 == 3'd2 ;
  assign WILL_FIRE_RL_action_f_update_l80c21 =
	     CAN_FIRE_RL_action_f_update_l80c21 ;

  // rule __me_check_46
  assign CAN_FIRE___me_check_46 = 1'b1 ;
  assign WILL_FIRE___me_check_46 = 1'b1 ;

  // rule RL_par_blocks_restart_1
  assign CAN_FIRE_RL_par_blocks_restart_1 =
	     par_blocks_start_reg_2 && !par_blocks_state_fired_2 ;
  assign WILL_FIRE_RL_par_blocks_restart_1 =
	     CAN_FIRE_RL_par_blocks_restart_1 ;

  // rule RL_action_f_init_l80c21
  assign CAN_FIRE_RL_action_f_init_l80c21 =
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ;
  assign WILL_FIRE_RL_action_f_init_l80c21 =
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ;

  // rule __me_check_45
  assign CAN_FIRE___me_check_45 = 1'b1 ;
  assign WILL_FIRE___me_check_45 = 1'b1 ;

  // rule RL_idle_l80c21
  assign CAN_FIRE_RL_idle_l80c21 =
	     !rg_j1_05_SLT_27___d206 && !par_blocks_start_wire_1$whas &&
	     par_blocks_state_mkFSMstate_1 == 3'd1 ;
  assign WILL_FIRE_RL_idle_l80c21 = CAN_FIRE_RL_idle_l80c21 ;

  // rule RL_idle_l80c21_1
  assign CAN_FIRE_RL_idle_l80c21_1 =
	     !rg_j1_05_SLT_27___d206 && !par_blocks_start_wire_1$whas &&
	     par_blocks_state_mkFSMstate_1 == 3'd3 ;
  assign WILL_FIRE_RL_idle_l80c21_1 = CAN_FIRE_RL_idle_l80c21_1 ;

  // rule RL_action_f_init_l66c21
  assign CAN_FIRE_RL_action_f_init_l66c21 =
	     par_running_whas__67_AND_par_running_wget__68__ETC___d217 ;
  assign WILL_FIRE_RL_action_f_init_l66c21 =
	     par_running_whas__67_AND_par_running_wget__68__ETC___d217 ;

  // rule RL_action_f_update_l66c21
  assign CAN_FIRE_RL_action_f_update_l66c21 =
	     par_running$whas && par_blocks_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_action_f_update_l66c21 =
	     CAN_FIRE_RL_action_f_update_l66c21 ;

  // rule __me_check_35
  assign CAN_FIRE___me_check_35 = 1'b1 ;
  assign WILL_FIRE___me_check_35 = 1'b1 ;

  // rule __me_check_36
  assign CAN_FIRE___me_check_36 = 1'b1 ;
  assign WILL_FIRE___me_check_36 = 1'b1 ;

  // rule RL_par_blocks_start_reg__dreg_update
  assign CAN_FIRE_RL_par_blocks_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_start_reg__dreg_update = 1'd1 ;

  // rule RL_par_blocks_state_handle_abort
  assign CAN_FIRE_RL_par_blocks_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_state_every
  assign CAN_FIRE_RL_par_blocks_state_every = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_every = 1'd1 ;

  // rule RL_par_blocks_state_fired__dreg_update
  assign CAN_FIRE_RL_par_blocks_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_1_restart
  assign CAN_FIRE_RL_par_blocks_1_restart =
	     par_blocks_1_start_reg && !par_blocks_1_state_fired ;
  assign WILL_FIRE_RL_par_blocks_1_restart =
	     CAN_FIRE_RL_par_blocks_1_restart ;

  // rule RL_idle_l69c21
  assign CAN_FIRE_RL_idle_l69c21 =
	     !rg_j2_74_SLT_27___d175 && !par_blocks_1_start_wire$whas &&
	     par_blocks_1_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_idle_l69c21 = CAN_FIRE_RL_idle_l69c21 ;

  // rule RL_idle_l69c21_1
  assign CAN_FIRE_RL_idle_l69c21_1 =
	     !rg_j2_74_SLT_27___d175 && !par_blocks_1_start_wire$whas &&
	     par_blocks_1_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_idle_l69c21_1 = CAN_FIRE_RL_idle_l69c21_1 ;

  // rule RL_action_f_update_l83c21
  assign CAN_FIRE_RL_action_f_update_l83c21 =
	     par_running_1$whas && par_blocks_1_state_mkFSMstate_1 == 3'd2 ;
  assign WILL_FIRE_RL_action_f_update_l83c21 =
	     CAN_FIRE_RL_action_f_update_l83c21 ;

  // rule __me_check_43
  assign CAN_FIRE___me_check_43 = 1'b1 ;
  assign WILL_FIRE___me_check_43 = 1'b1 ;

  // rule RL_par_blocks_1_restart_1
  assign CAN_FIRE_RL_par_blocks_1_restart_1 =
	     par_blocks_1_start_reg_2 && !par_blocks_1_state_fired_2 ;
  assign WILL_FIRE_RL_par_blocks_1_restart_1 =
	     CAN_FIRE_RL_par_blocks_1_restart_1 ;

  // rule RL_action_f_init_l83c21
  assign CAN_FIRE_RL_action_f_init_l83c21 =
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ;
  assign WILL_FIRE_RL_action_f_init_l83c21 =
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_idle_l83c21
  assign CAN_FIRE_RL_idle_l83c21 =
	     !rg_j2_74_SLT_27___d175 && !par_blocks_1_start_wire_1$whas &&
	     par_blocks_1_state_mkFSMstate_1 == 3'd1 ;
  assign WILL_FIRE_RL_idle_l83c21 = CAN_FIRE_RL_idle_l83c21 ;

  // rule RL_idle_l83c21_1
  assign CAN_FIRE_RL_idle_l83c21_1 =
	     !rg_j2_74_SLT_27___d175 && !par_blocks_1_start_wire_1$whas &&
	     par_blocks_1_state_mkFSMstate_1 == 3'd3 ;
  assign WILL_FIRE_RL_idle_l83c21_1 = CAN_FIRE_RL_idle_l83c21_1 ;

  // rule RL_action_f_init_l69c21
  assign CAN_FIRE_RL_action_f_init_l69c21 =
	     par_running_whas__67_AND_par_running_wget__68__ETC___d186 ;
  assign WILL_FIRE_RL_action_f_init_l69c21 =
	     par_running_whas__67_AND_par_running_wget__68__ETC___d186 ;

  // rule RL_action_f_update_l69c21
  assign CAN_FIRE_RL_action_f_update_l69c21 =
	     par_running$whas && par_blocks_1_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_action_f_update_l69c21 =
	     CAN_FIRE_RL_action_f_update_l69c21 ;

  // rule __me_check_25
  assign CAN_FIRE___me_check_25 = 1'b1 ;
  assign WILL_FIRE___me_check_25 = 1'b1 ;

  // rule __me_check_26
  assign CAN_FIRE___me_check_26 = 1'b1 ;
  assign WILL_FIRE___me_check_26 = 1'b1 ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_30
  assign CAN_FIRE___me_check_30 = 1'b1 ;
  assign WILL_FIRE___me_check_30 = 1'b1 ;

  // rule __me_check_31
  assign CAN_FIRE___me_check_31 = 1'b1 ;
  assign WILL_FIRE___me_check_31 = 1'b1 ;

  // rule __me_check_32
  assign CAN_FIRE___me_check_32 = 1'b1 ;
  assign WILL_FIRE___me_check_32 = 1'b1 ;

  // rule __me_check_33
  assign CAN_FIRE___me_check_33 = 1'b1 ;
  assign WILL_FIRE___me_check_33 = 1'b1 ;

  // rule RL_par_blocks_1_start_reg__dreg_update
  assign CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update = 1'd1 ;

  // rule RL_par_blocks_1_state_handle_abort
  assign CAN_FIRE_RL_par_blocks_1_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_1_state_handle_abort = 1'b0 ;

  // rule RL_par_blocks_1_state_every
  assign CAN_FIRE_RL_par_blocks_1_state_every = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_every = 1'd1 ;

  // rule RL_par_blocks_1_state_every_1
  assign CAN_FIRE_RL_par_blocks_1_state_every_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_every_1 = 1'd1 ;

  // rule RL_par_blocks_1_state_fired__dreg_update
  assign CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update = 1'd1 ;

  // rule RL_par_blocks_start_reg__dreg_update_1
  assign CAN_FIRE_RL_par_blocks_start_reg__dreg_update_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_start_reg__dreg_update_1 = 1'd1 ;

  // rule RL_par_blocks_state_handle_abort_1
  assign CAN_FIRE_RL_par_blocks_state_handle_abort_1 = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_state_handle_abort_1 = 1'b0 ;

  // rule RL_par_blocks_state_every_1
  assign CAN_FIRE_RL_par_blocks_state_every_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_every_1 = 1'd1 ;

  // rule RL_par_blocks_state_fired__dreg_update_1
  assign CAN_FIRE_RL_par_blocks_state_fired__dreg_update_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_state_fired__dreg_update_1 = 1'd1 ;

  // rule RL_par_blocks_1_start_reg__dreg_update_1
  assign CAN_FIRE_RL_par_blocks_1_start_reg__dreg_update_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_start_reg__dreg_update_1 = 1'd1 ;

  // rule RL_par_blocks_1_state_handle_abort_1
  assign CAN_FIRE_RL_par_blocks_1_state_handle_abort_1 = 1'b0 ;
  assign WILL_FIRE_RL_par_blocks_1_state_handle_abort_1 = 1'b0 ;

  // rule RL_par_blocks_1_state_fired__dreg_update_1
  assign CAN_FIRE_RL_par_blocks_1_state_fired__dreg_update_1 = 1'd1 ;
  assign WILL_FIRE_RL_par_blocks_1_state_fired__dreg_update_1 = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l69c21_1 || WILL_FIRE_RL_idle_l69c21 ;
  assign MUX_par_blocks_1_state_mkFSMstate_1$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l83c21_1 || WILL_FIRE_RL_idle_l83c21 ;
  assign MUX_par_blocks_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l66c21_1 || WILL_FIRE_RL_idle_l66c21 ;
  assign MUX_par_blocks_state_mkFSMstate_1$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l80c21_1 || WILL_FIRE_RL_idle_l80c21 ;
  assign MUX_rg_j1$write_1__SEL_1 =
	     WILL_FIRE_RL_action_f_update_l80c21 ||
	     WILL_FIRE_RL_action_f_update_l66c21 ;
  assign MUX_rg_j2$write_1__SEL_1 =
	     WILL_FIRE_RL_action_f_update_l83c21 ||
	     WILL_FIRE_RL_action_f_update_l69c21 ;
  always@(rg_j1)
  begin
    case (rg_j1)
      32'd0, 32'd11, 32'd26: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd69;
      32'd1, 32'd25: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd78;
      32'd2, 32'd24: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd73;
      32'd3: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd71;
      32'd4, 32'd20: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd77;
      32'd5, 32'd7, 32'd9, 32'd12, 32'd21:
	  MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd65;
      32'd6: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd87;
      32'd8: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd83;
      32'd10: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd82;
      32'd13, 32'd14, 32'd19: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd76;
      32'd15: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd89;
      32'd16, 32'd22: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd67;
      32'd17, 32'd18: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd79;
      32'd23: MUX_hw_ModelEnigma$request_put_1__VAL_1 = 8'd72;
      default: MUX_hw_ModelEnigma$request_put_1__VAL_1 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_j1)
  begin
    case (rg_j1)
      32'd0, 32'd13: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd85;
      32'd1: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd80;
      32'd2, 32'd18: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd69;
      32'd3: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd75;
      32'd4, 32'd12, 32'd25: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd84;
      32'd5, 32'd10, 32'd22: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd66;
      32'd6: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd83;
      32'd7: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd68;
      32'd8: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd82;
      32'd9: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd79;
      32'd11: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd86;
      32'd14: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd74;
      32'd15, 32'd21, 32'd24: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd71;
      32'd16: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd78;
      32'd17: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd67;
      32'd19, 32'd20: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd72;
      32'd23: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd88;
      32'd26: MUX_hw_ModelEnigma$request_put_1__VAL_2 = 8'd70;
      default: MUX_hw_ModelEnigma$request_put_1__VAL_2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign MUX_rg_j1$write_1__VAL_1 = rg_j1 + 32'd1 ;
  assign MUX_rg_j2$write_1__VAL_1 = rg_j2 + 32'd1 ;

  // inlined wires
  assign start_wire$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign par_running$whas =
	     WILL_FIRE_RL_actionpar_run_l65c18 ||
	     WILL_FIRE_RL_actionpar_start_l65c18 ;
  assign par_blocks_start_wire$whas =
	     WILL_FIRE_RL_par_blocks_restart ||
	     WILL_FIRE_RL_actionpar_start_l65c18 ;
  assign par_blocks_1_start_wire$whas =
	     WILL_FIRE_RL_par_blocks_1_restart ||
	     WILL_FIRE_RL_actionpar_start_l65c18 ;
  assign par_running_1$whas =
	     WILL_FIRE_RL_actionpar_run_l79c18 ||
	     WILL_FIRE_RL_actionpar_start_l79c18 ;
  assign par_blocks_start_wire_1$whas =
	     WILL_FIRE_RL_par_blocks_restart_1 ||
	     WILL_FIRE_RL_actionpar_start_l79c18 ;
  assign par_blocks_1_start_wire_1$whas =
	     WILL_FIRE_RL_par_blocks_1_restart_1 ||
	     WILL_FIRE_RL_actionpar_start_l79c18 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l37c15 || WILL_FIRE_RL_actionpar_run_l79c18 ||
	     WILL_FIRE_RL_actionpar_run_l65c18 ||
	     WILL_FIRE_RL_action_l88c18 ||
	     WILL_FIRE_RL_actionpar_start_l79c18 ||
	     WILL_FIRE_RL_action_l78c18 ||
	     WILL_FIRE_RL_action_l77c32 ||
	     WILL_FIRE_RL_action_l74c18 ||
	     WILL_FIRE_RL_actionpar_start_l65c18 ||
	     WILL_FIRE_RL_action_l64c18 ||
	     WILL_FIRE_RL_action_l63c32 ||
	     WILL_FIRE_RL_action_l60c18 ||
	     WILL_FIRE_RL_action_l52c18 ||
	     WILL_FIRE_RL_action_l44c18 ||
	     WILL_FIRE_RL_action_l41c18 ||
	     WILL_FIRE_RL_action_l38c32 ;
  assign par_blocks_state_set_pw$whas =
	     WILL_FIRE_RL_idle_l66c21_1 || WILL_FIRE_RL_idle_l66c21 ||
	     WILL_FIRE_RL_action_f_update_l66c21 ||
	     WILL_FIRE_RL_action_l67c38 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d217 ;
  assign par_blocks_1_state_set_pw$whas =
	     WILL_FIRE_RL_idle_l69c21_1 || WILL_FIRE_RL_idle_l69c21 ||
	     WILL_FIRE_RL_action_f_update_l69c21 ||
	     WILL_FIRE_RL_action_l69c91 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d186 ;
  assign par_blocks_state_set_pw_1$whas =
	     WILL_FIRE_RL_idle_l80c21_1 || WILL_FIRE_RL_idle_l80c21 ||
	     WILL_FIRE_RL_action_f_update_l80c21 ||
	     WILL_FIRE_RL_action_l81c38 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ;
  assign par_blocks_1_state_set_pw_1$whas =
	     WILL_FIRE_RL_idle_l83c21_1 || WILL_FIRE_RL_idle_l83c21 ||
	     WILL_FIRE_RL_action_f_update_l83c21 ||
	     WILL_FIRE_RL_action_l83c94 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ;

  // register par_blocks_1_start_reg
  assign par_blocks_1_start_reg$D_IN = par_blocks_1_start_wire$whas ;
  assign par_blocks_1_start_reg$EN = 1'd1 ;

  // register par_blocks_1_start_reg_2
  assign par_blocks_1_start_reg_2$D_IN = par_blocks_1_start_wire_1$whas ;
  assign par_blocks_1_start_reg_2$EN = 1'd1 ;

  // register par_blocks_1_state_can_overlap
  assign par_blocks_1_state_can_overlap$D_IN =
	     par_blocks_1_state_set_pw$whas ||
	     par_blocks_1_state_can_overlap ;
  assign par_blocks_1_state_can_overlap$EN = 1'd1 ;

  // register par_blocks_1_state_can_overlap_1
  assign par_blocks_1_state_can_overlap_1$D_IN =
	     par_blocks_1_state_set_pw_1$whas ||
	     par_blocks_1_state_can_overlap_1 ;
  assign par_blocks_1_state_can_overlap_1$EN = 1'd1 ;

  // register par_blocks_1_state_fired
  assign par_blocks_1_state_fired$D_IN = par_blocks_1_state_set_pw$whas ;
  assign par_blocks_1_state_fired$EN = 1'd1 ;

  // register par_blocks_1_state_fired_2
  assign par_blocks_1_state_fired_2$D_IN = par_blocks_1_state_set_pw_1$whas ;
  assign par_blocks_1_state_fired_2$EN = 1'd1 ;

  // register par_blocks_1_state_mkFSMstate
  always@(MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1 or
	  par_running_whas__67_AND_par_running_wget__68__ETC___d186 or
	  WILL_FIRE_RL_action_l69c91 or WILL_FIRE_RL_action_f_update_l69c21)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_par_blocks_1_state_mkFSMstate$write_1__SEL_1:
	  par_blocks_1_state_mkFSMstate$D_IN = 3'd0;
      par_running_whas__67_AND_par_running_wget__68__ETC___d186:
	  par_blocks_1_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l69c91: par_blocks_1_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_f_update_l69c21:
	  par_blocks_1_state_mkFSMstate$D_IN = 3'd3;
      default: par_blocks_1_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign par_blocks_1_state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l69c21_1 || WILL_FIRE_RL_idle_l69c21 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	     WILL_FIRE_RL_action_l69c91 ||
	     WILL_FIRE_RL_action_f_update_l69c21 ;

  // register par_blocks_1_state_mkFSMstate_1
  always@(MUX_par_blocks_1_state_mkFSMstate_1$write_1__SEL_1 or
	  par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 or
	  WILL_FIRE_RL_action_l83c94 or WILL_FIRE_RL_action_f_update_l83c21)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_par_blocks_1_state_mkFSMstate_1$write_1__SEL_1:
	  par_blocks_1_state_mkFSMstate_1$D_IN = 3'd0;
      par_running_1_whas__60_AND_par_running_1_wget__ETC___d276:
	  par_blocks_1_state_mkFSMstate_1$D_IN = 3'd1;
      WILL_FIRE_RL_action_l83c94: par_blocks_1_state_mkFSMstate_1$D_IN = 3'd2;
      WILL_FIRE_RL_action_f_update_l83c21:
	  par_blocks_1_state_mkFSMstate_1$D_IN = 3'd3;
      default: par_blocks_1_state_mkFSMstate_1$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign par_blocks_1_state_mkFSMstate_1$EN =
	     WILL_FIRE_RL_idle_l83c21_1 || WILL_FIRE_RL_idle_l83c21 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	     WILL_FIRE_RL_action_l83c94 ||
	     WILL_FIRE_RL_action_f_update_l83c21 ;

  // register par_blocks_start_reg
  assign par_blocks_start_reg$D_IN = par_blocks_start_wire$whas ;
  assign par_blocks_start_reg$EN = 1'd1 ;

  // register par_blocks_start_reg_2
  assign par_blocks_start_reg_2$D_IN = par_blocks_start_wire_1$whas ;
  assign par_blocks_start_reg_2$EN = 1'd1 ;

  // register par_blocks_state_can_overlap
  assign par_blocks_state_can_overlap$D_IN =
	     par_blocks_state_set_pw$whas || par_blocks_state_can_overlap ;
  assign par_blocks_state_can_overlap$EN = 1'd1 ;

  // register par_blocks_state_can_overlap_1
  assign par_blocks_state_can_overlap_1$D_IN =
	     par_blocks_state_set_pw_1$whas ||
	     par_blocks_state_can_overlap_1 ;
  assign par_blocks_state_can_overlap_1$EN = 1'd1 ;

  // register par_blocks_state_fired
  assign par_blocks_state_fired$D_IN = par_blocks_state_set_pw$whas ;
  assign par_blocks_state_fired$EN = 1'd1 ;

  // register par_blocks_state_fired_2
  assign par_blocks_state_fired_2$D_IN = par_blocks_state_set_pw_1$whas ;
  assign par_blocks_state_fired_2$EN = 1'd1 ;

  // register par_blocks_state_mkFSMstate
  always@(MUX_par_blocks_state_mkFSMstate$write_1__SEL_1 or
	  par_running_whas__67_AND_par_running_wget__68__ETC___d217 or
	  WILL_FIRE_RL_action_l67c38 or WILL_FIRE_RL_action_f_update_l66c21)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_par_blocks_state_mkFSMstate$write_1__SEL_1:
	  par_blocks_state_mkFSMstate$D_IN = 3'd0;
      par_running_whas__67_AND_par_running_wget__68__ETC___d217:
	  par_blocks_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l67c38: par_blocks_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_f_update_l66c21:
	  par_blocks_state_mkFSMstate$D_IN = 3'd3;
      default: par_blocks_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign par_blocks_state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l66c21_1 || WILL_FIRE_RL_idle_l66c21 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	     WILL_FIRE_RL_action_l67c38 ||
	     WILL_FIRE_RL_action_f_update_l66c21 ;

  // register par_blocks_state_mkFSMstate_1
  always@(MUX_par_blocks_state_mkFSMstate_1$write_1__SEL_1 or
	  par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 or
	  WILL_FIRE_RL_action_l81c38 or WILL_FIRE_RL_action_f_update_l80c21)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_par_blocks_state_mkFSMstate_1$write_1__SEL_1:
	  par_blocks_state_mkFSMstate_1$D_IN = 3'd0;
      par_running_1_whas__60_AND_par_running_1_wget__ETC___d301:
	  par_blocks_state_mkFSMstate_1$D_IN = 3'd1;
      WILL_FIRE_RL_action_l81c38: par_blocks_state_mkFSMstate_1$D_IN = 3'd2;
      WILL_FIRE_RL_action_f_update_l80c21:
	  par_blocks_state_mkFSMstate_1$D_IN = 3'd3;
      default: par_blocks_state_mkFSMstate_1$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign par_blocks_state_mkFSMstate_1$EN =
	     WILL_FIRE_RL_idle_l80c21_1 || WILL_FIRE_RL_idle_l80c21 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	     WILL_FIRE_RL_action_l81c38 ||
	     WILL_FIRE_RL_action_f_update_l80c21 ;

  // register rg_j1
  assign rg_j1$D_IN =
	     MUX_rg_j1$write_1__SEL_1 ? MUX_rg_j1$write_1__VAL_1 : 32'd0 ;
  assign rg_j1$EN =
	     WILL_FIRE_RL_action_f_update_l80c21 ||
	     WILL_FIRE_RL_action_f_update_l66c21 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d217 ;

  // register rg_j2
  assign rg_j2$D_IN =
	     MUX_rg_j2$write_1__SEL_1 ? MUX_rg_j2$write_1__VAL_1 : 32'd0 ;
  assign rg_j2$EN =
	     WILL_FIRE_RL_action_f_update_l83c21 ||
	     WILL_FIRE_RL_action_f_update_l69c21 ||
	     par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	     par_running_whas__67_AND_par_running_wget__68__ETC___d186 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l37c15 or
	  WILL_FIRE_RL_action_l38c32 or
	  WILL_FIRE_RL_action_l41c18 or
	  WILL_FIRE_RL_action_l44c18 or
	  WILL_FIRE_RL_action_l52c18 or
	  WILL_FIRE_RL_action_l60c18 or
	  WILL_FIRE_RL_action_l63c32 or
	  WILL_FIRE_RL_action_l64c18 or
	  WILL_FIRE_RL_actionpar_start_l65c18 or
	  WILL_FIRE_RL_actionpar_run_l65c18 or
	  WILL_FIRE_RL_action_l74c18 or
	  WILL_FIRE_RL_action_l77c32 or
	  WILL_FIRE_RL_action_l78c18 or
	  WILL_FIRE_RL_actionpar_start_l79c18 or
	  WILL_FIRE_RL_actionpar_run_l79c18 or WILL_FIRE_RL_action_l88c18)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l37c15: state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_action_l38c32: state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_action_l41c18: state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_action_l44c18: state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_action_l52c18: state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_action_l60c18: state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_action_l63c32: state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_action_l64c18: state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_actionpar_start_l65c18: state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_actionpar_run_l65c18: state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_action_l74c18: state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_action_l77c32: state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_action_l78c18: state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_actionpar_start_l79c18: state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_actionpar_run_l79c18: state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_action_l88c18: state_mkFSMstate$D_IN = 5'd17;
      default: state_mkFSMstate$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l37c15 || WILL_FIRE_RL_action_l38c32 ||
	     WILL_FIRE_RL_action_l41c18 ||
	     WILL_FIRE_RL_action_l44c18 ||
	     WILL_FIRE_RL_action_l52c18 ||
	     WILL_FIRE_RL_action_l60c18 ||
	     WILL_FIRE_RL_action_l63c32 ||
	     WILL_FIRE_RL_action_l64c18 ||
	     WILL_FIRE_RL_actionpar_start_l65c18 ||
	     WILL_FIRE_RL_actionpar_run_l65c18 ||
	     WILL_FIRE_RL_action_l74c18 ||
	     WILL_FIRE_RL_action_l77c32 ||
	     WILL_FIRE_RL_action_l78c18 ||
	     WILL_FIRE_RL_actionpar_start_l79c18 ||
	     WILL_FIRE_RL_actionpar_run_l79c18 ||
	     WILL_FIRE_RL_action_l88c18 ;

  // submodule hw_ModelEnigma
  assign hw_ModelEnigma$request_put =
	     WILL_FIRE_RL_action_l67c38 ?
	       MUX_hw_ModelEnigma$request_put_1__VAL_1 :
	       MUX_hw_ModelEnigma$request_put_1__VAL_2 ;
  assign hw_ModelEnigma$EN_reset =
	     WILL_FIRE_RL_action_l77c32 || WILL_FIRE_RL_action_l63c32 ;
  assign hw_ModelEnigma$EN_request_put =
	     WILL_FIRE_RL_action_l67c38 || WILL_FIRE_RL_action_l81c38 ;
  assign hw_ModelEnigma$EN_response_get =
	     WILL_FIRE_RL_action_l83c94 || WILL_FIRE_RL_action_l69c91 ;

  // remaining internal signals
  assign NOT_par_blocks_1_abort_1_whas__12_34_OR_NOT_pa_ETC___d364 =
	     par_blocks_1_state_mkFSMstate_1 != 3'd0 &&
	     (rg_j2_74_SLT_27___d175 ||
	      par_blocks_1_state_mkFSMstate_1 != 3'd1) &&
	     (rg_j2_74_SLT_27___d175 ||
	      par_blocks_1_state_mkFSMstate_1 != 3'd3) ||
	     par_blocks_1_start_reg_2 && !par_blocks_1_state_fired_2 ;
  assign NOT_par_blocks_1_abort_whas__4_6_OR_NOT_par_bl_ETC___d344 =
	     par_blocks_1_state_mkFSMstate != 3'd0 &&
	     (rg_j2_74_SLT_27___d175 ||
	      par_blocks_1_state_mkFSMstate != 3'd1) &&
	     (rg_j2_74_SLT_27___d175 ||
	      par_blocks_1_state_mkFSMstate != 3'd3) ||
	     par_blocks_1_start_reg && !par_blocks_1_state_fired ;
  assign NOT_par_blocks_abort_1_whas__3_05_OR_NOT_par_b_ETC___d373 =
	     par_blocks_state_mkFSMstate_1 != 3'd0 &&
	     (rg_j1_05_SLT_27___d206 ||
	      par_blocks_state_mkFSMstate_1 != 3'd1) &&
	     (rg_j1_05_SLT_27___d206 ||
	      par_blocks_state_mkFSMstate_1 != 3'd3) ||
	     par_blocks_start_reg_2 && !par_blocks_state_fired_2 ;
  assign NOT_par_blocks_abort_whas__5_7_OR_NOT_par_bloc_ETC___d353 =
	     par_blocks_state_mkFSMstate != 3'd0 &&
	     (rg_j1_05_SLT_27___d206 ||
	      par_blocks_state_mkFSMstate != 3'd1) &&
	     (rg_j1_05_SLT_27___d206 ||
	      par_blocks_state_mkFSMstate != 3'd3) ||
	     par_blocks_start_reg && !par_blocks_state_fired ;
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d392 =
	     (state_mkFSMstate == 5'd0 || state_mkFSMstate == 5'd17) &&
	     (!start_reg_1 || state_fired) ;
  assign par_blocks_1_abort_1_whas__12_AND_par_blocks_1_ETC___d319 =
	     (par_blocks_1_state_mkFSMstate_1 == 3'd0 ||
	      !rg_j2_74_SLT_27___d175 &&
	      par_blocks_1_state_mkFSMstate_1 == 3'd1 ||
	      !rg_j2_74_SLT_27___d175 &&
	      par_blocks_1_state_mkFSMstate_1 == 3'd3) &&
	     (!par_blocks_1_start_reg_2 || par_blocks_1_state_fired_2) ;
  assign par_blocks_1_abort_whas__4_AND_par_blocks_1_ab_ETC___d237 =
	     (par_blocks_1_state_mkFSMstate == 3'd0 ||
	      !rg_j2_74_SLT_27___d175 &&
	      par_blocks_1_state_mkFSMstate == 3'd1 ||
	      !rg_j2_74_SLT_27___d175 &&
	      par_blocks_1_state_mkFSMstate == 3'd3) &&
	     (!par_blocks_1_start_reg || par_blocks_1_state_fired) ;
  assign par_blocks_abort_1_whas__3_AND_par_blocks_abor_ETC___d326 =
	     (par_blocks_state_mkFSMstate_1 == 3'd0 ||
	      !rg_j1_05_SLT_27___d206 &&
	      par_blocks_state_mkFSMstate_1 == 3'd1 ||
	      !rg_j1_05_SLT_27___d206 &&
	      par_blocks_state_mkFSMstate_1 == 3'd3) &&
	     (!par_blocks_start_reg_2 || par_blocks_state_fired_2) ;
  assign par_blocks_abort_whas__5_AND_par_blocks_abort__ETC___d244 =
	     (par_blocks_state_mkFSMstate == 3'd0 ||
	      !rg_j1_05_SLT_27___d206 &&
	      par_blocks_state_mkFSMstate == 3'd1 ||
	      !rg_j1_05_SLT_27___d206 &&
	      par_blocks_state_mkFSMstate == 3'd3) &&
	     (!par_blocks_start_reg || par_blocks_state_fired) ;
  assign par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 =
	     par_running_1$whas &&
	     (par_blocks_1_start_wire_1$whas &&
	      par_blocks_1_state_mkFSMstate_1 == 3'd0 ||
	      !rg_j2_74_SLT_27___d175 && par_blocks_1_start_wire_1$whas &&
	      par_blocks_1_state_mkFSMstate_1 == 3'd1 ||
	      !rg_j2_74_SLT_27___d175 && par_blocks_1_start_wire_1$whas &&
	      par_blocks_1_state_mkFSMstate_1 == 3'd3) ;
  assign par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 =
	     par_running_1$whas &&
	     (par_blocks_start_wire_1$whas &&
	      par_blocks_state_mkFSMstate_1 == 3'd0 ||
	      !rg_j1_05_SLT_27___d206 && par_blocks_start_wire_1$whas &&
	      par_blocks_state_mkFSMstate_1 == 3'd1 ||
	      !rg_j1_05_SLT_27___d206 && par_blocks_start_wire_1$whas &&
	      par_blocks_state_mkFSMstate_1 == 3'd3) ;
  assign par_running_whas__67_AND_par_running_wget__68__ETC___d186 =
	     par_running$whas &&
	     (par_blocks_1_start_wire$whas &&
	      par_blocks_1_state_mkFSMstate == 3'd0 ||
	      !rg_j2_74_SLT_27___d175 && par_blocks_1_start_wire$whas &&
	      par_blocks_1_state_mkFSMstate == 3'd1 ||
	      !rg_j2_74_SLT_27___d175 && par_blocks_1_start_wire$whas &&
	      par_blocks_1_state_mkFSMstate == 3'd3) ;
  assign par_running_whas__67_AND_par_running_wget__68__ETC___d217 =
	     par_running$whas &&
	     (par_blocks_start_wire$whas &&
	      par_blocks_state_mkFSMstate == 3'd0 ||
	      !rg_j1_05_SLT_27___d206 && par_blocks_start_wire$whas &&
	      par_blocks_state_mkFSMstate == 3'd1 ||
	      !rg_j1_05_SLT_27___d206 && par_blocks_start_wire$whas &&
	      par_blocks_state_mkFSMstate == 3'd3) ;
  assign rg_j1_05_SLT_27___d206 = (rg_j1 ^ 32'h80000000) < 32'h8000001B ;
  assign rg_j2_74_SLT_27___d175 = (rg_j2 ^ 32'h80000000) < 32'h8000001B ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_start_reg_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_1_state_can_overlap_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_state_fired_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	par_blocks_1_state_mkFSMstate_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_start_reg_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_state_can_overlap_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_state_fired_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	par_blocks_state_mkFSMstate_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (par_blocks_1_start_reg$EN)
	  par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_start_reg$D_IN;
	if (par_blocks_1_start_reg_2$EN)
	  par_blocks_1_start_reg_2 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_start_reg_2$D_IN;
	if (par_blocks_1_state_can_overlap$EN)
	  par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_can_overlap$D_IN;
	if (par_blocks_1_state_can_overlap_1$EN)
	  par_blocks_1_state_can_overlap_1 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_can_overlap_1$D_IN;
	if (par_blocks_1_state_fired$EN)
	  par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_fired$D_IN;
	if (par_blocks_1_state_fired_2$EN)
	  par_blocks_1_state_fired_2 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_fired_2$D_IN;
	if (par_blocks_1_state_mkFSMstate$EN)
	  par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_mkFSMstate$D_IN;
	if (par_blocks_1_state_mkFSMstate_1$EN)
	  par_blocks_1_state_mkFSMstate_1 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_1_state_mkFSMstate_1$D_IN;
	if (par_blocks_start_reg$EN)
	  par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_start_reg$D_IN;
	if (par_blocks_start_reg_2$EN)
	  par_blocks_start_reg_2 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_start_reg_2$D_IN;
	if (par_blocks_state_can_overlap$EN)
	  par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_can_overlap$D_IN;
	if (par_blocks_state_can_overlap_1$EN)
	  par_blocks_state_can_overlap_1 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_can_overlap_1$D_IN;
	if (par_blocks_state_fired$EN)
	  par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_fired$D_IN;
	if (par_blocks_state_fired_2$EN)
	  par_blocks_state_fired_2 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_fired_2$D_IN;
	if (par_blocks_state_mkFSMstate$EN)
	  par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_mkFSMstate$D_IN;
	if (par_blocks_state_mkFSMstate_1$EN)
	  par_blocks_state_mkFSMstate_1 <= `BSV_ASSIGNMENT_DELAY
	      par_blocks_state_mkFSMstate_1$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
    if (rg_j1$EN) rg_j1 <= `BSV_ASSIGNMENT_DELAY rg_j1$D_IN;
    if (rg_j2$EN) rg_j2 <= `BSV_ASSIGNMENT_DELAY rg_j2$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    par_blocks_1_start_reg = 1'h0;
    par_blocks_1_start_reg_2 = 1'h0;
    par_blocks_1_state_can_overlap = 1'h0;
    par_blocks_1_state_can_overlap_1 = 1'h0;
    par_blocks_1_state_fired = 1'h0;
    par_blocks_1_state_fired_2 = 1'h0;
    par_blocks_1_state_mkFSMstate = 3'h2;
    par_blocks_1_state_mkFSMstate_1 = 3'h2;
    par_blocks_start_reg = 1'h0;
    par_blocks_start_reg_2 = 1'h0;
    par_blocks_state_can_overlap = 1'h0;
    par_blocks_state_can_overlap_1 = 1'h0;
    par_blocks_state_fired = 1'h0;
    par_blocks_state_fired_2 = 1'h0;
    par_blocks_state_mkFSMstate = 3'h2;
    par_blocks_state_mkFSMstate_1 = 3'h2;
    rg_j1 = 32'hAAAAAAAA;
    rg_j2 = 32'hAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c18)
	$display("Direct Cryptol-derived version");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%s", "Cipher text output:   ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd85);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd80);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd75);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd84);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd66);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd83);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd68);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd82);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd79);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd66);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd86);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd84);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd85);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd74);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd78);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd67);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd72);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd72);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd66);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd88);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd84);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%c", 8'd70);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18) $write("%s", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%s", "Plaintext output:     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd78);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd73);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd77);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd87);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd83);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd82);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd89);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd67);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd79);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd79);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd77);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd67);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd72);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd73);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd78);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18) $write("%s", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l60c18)
	$display("\nHW version (sequential input/output of text)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l64c18) $write("Cipher text output:   ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l74c18) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l78c18) $write("Plaintext output:     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l88c18) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l69c91)
	$write("%c", hw_ModelEnigma$response_get);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l83c94)
	$write("%c", hw_ModelEnigma$response_get);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%s", "Plaintext input:      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd78);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd73);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd77);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd87);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd83);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd82);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd89);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd67);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd79);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd79);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd77);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd65);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd67);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd72);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd73);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd78);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%c", 8'd69);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32) $write("%s", "\n\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l81c38 && WILL_FIRE_RL_action_f_update_l80c21)
	$display("Error: \"src_BSV/Tb.bsv\", line 81, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l81c38] and\n  [RL_action_f_update_l80c21] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 &&
	  (WILL_FIRE_RL_action_l81c38 || WILL_FIRE_RL_action_f_update_l80c21))
	$display("Error: \"src_BSV/Tb.bsv\", line 80, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l80c21] and\n  [RL_action_l81c38, RL_action_f_update_l80c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (par_running_whas__67_AND_par_running_wget__68__ETC___d217 &&
	  (WILL_FIRE_RL_action_l67c38 || WILL_FIRE_RL_action_f_update_l66c21))
	$display("Error: \"src_BSV/Tb.bsv\", line 66, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l66c21] and\n  [RL_action_l67c38, RL_action_f_update_l66c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l67c38 && WILL_FIRE_RL_action_f_update_l66c21)
	$display("Error: \"src_BSV/Tb.bsv\", line 67, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l67c38] and\n  [RL_action_f_update_l66c21] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l83c94 && WILL_FIRE_RL_action_f_update_l83c21)
	$display("Error: \"src_BSV/Tb.bsv\", line 83, column 94: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l83c94] and\n  [RL_action_f_update_l83c21] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l74c18 &&
	  (WILL_FIRE_RL_action_l77c32 || WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 74, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l74c18] and\n  [RL_action_l77c32, RL_action_l78c18, RL_action_f_init_l83c21,\n  RL_action_l83c94, RL_action_f_update_l83c21, RL_action_f_init_l80c21,\n  RL_action_l81c38, RL_action_f_update_l80c21, RL_actionpar_start_l79c18,\n  RL_action_l88c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l77c32 &&
	  (WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 77, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l77c32] and\n  [RL_action_l78c18, RL_action_f_init_l83c21, RL_action_l83c94,\n  RL_action_f_update_l83c21, RL_action_f_init_l80c21, RL_action_l81c38,\n  RL_action_f_update_l80c21, RL_actionpar_start_l79c18, RL_action_l88c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l78c18 &&
	  (par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 78, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l78c18] and\n  [RL_action_f_init_l83c21, RL_action_l83c94, RL_action_f_update_l83c21,\n  RL_action_f_init_l80c21, RL_action_l81c38, RL_action_f_update_l80c21,\n  RL_actionpar_start_l79c18, RL_action_l88c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 &&
	  (WILL_FIRE_RL_action_l83c94 || WILL_FIRE_RL_action_f_update_l83c21))
	$display("Error: \"src_BSV/Tb.bsv\", line 83, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l83c21] and\n  [RL_action_l83c94, RL_action_f_update_l83c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18) &&
	  WILL_FIRE_RL_action_l88c18)
	$display("Error: \"src_BSV/Tb.bsv\", line 83, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l83c21,\n  RL_action_l83c94, RL_action_f_update_l83c21, RL_action_f_init_l80c21,\n  RL_action_l81c38, RL_action_f_update_l80c21, RL_actionpar_start_l79c18] and\n  [RL_action_l88c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c32 &&
	  (WILL_FIRE_RL_action_l41c18 || WILL_FIRE_RL_action_l44c18 ||
	   WILL_FIRE_RL_action_l52c18 ||
	   WILL_FIRE_RL_action_l60c18 ||
	   WILL_FIRE_RL_action_l63c32 ||
	   WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 38, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l38c32] and\n  [RL_action_l41c18, RL_action_l44c18, RL_action_l52c18, RL_action_l60c18,\n  RL_action_l63c32, RL_action_l64c18, RL_action_f_init_l69c21,\n  RL_action_l69c91, RL_action_f_update_l69c21, RL_action_f_init_l66c21,\n  RL_action_l67c38, RL_action_f_update_l66c21, RL_actionpar_start_l65c18,\n  RL_action_l74c18, RL_action_l77c32, RL_action_l78c18,\n  RL_action_f_init_l83c21, RL_action_l83c94, RL_action_f_update_l83c21,\n  RL_action_f_init_l80c21, RL_action_l81c38, RL_action_f_update_l80c21,\n  RL_actionpar_start_l79c18, RL_action_l88c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c18 &&
	  (WILL_FIRE_RL_action_l44c18 || WILL_FIRE_RL_action_l52c18 ||
	   WILL_FIRE_RL_action_l60c18 ||
	   WILL_FIRE_RL_action_l63c32 ||
	   WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 41, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l41c18] and\n  [RL_action_l44c18, RL_action_l52c18, RL_action_l60c18, RL_action_l63c32,\n  RL_action_l64c18, RL_action_f_init_l69c21, RL_action_l69c91,\n  RL_action_f_update_l69c21, RL_action_f_init_l66c21, RL_action_l67c38,\n  RL_action_f_update_l66c21, RL_actionpar_start_l65c18, RL_action_l74c18,\n  RL_action_l77c32, RL_action_l78c18, RL_action_f_init_l83c21,\n  RL_action_l83c94, RL_action_f_update_l83c21, RL_action_f_init_l80c21,\n  RL_action_l81c38, RL_action_f_update_l80c21, RL_actionpar_start_l79c18,\n  RL_action_l88c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l44c18 &&
	  (WILL_FIRE_RL_action_l52c18 || WILL_FIRE_RL_action_l60c18 ||
	   WILL_FIRE_RL_action_l63c32 ||
	   WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 44, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l44c18] and\n  [RL_action_l52c18, RL_action_l60c18, RL_action_l63c32, RL_action_l64c18,\n  RL_action_f_init_l69c21, RL_action_l69c91, RL_action_f_update_l69c21,\n  RL_action_f_init_l66c21, RL_action_l67c38, RL_action_f_update_l66c21,\n  RL_actionpar_start_l65c18, RL_action_l74c18, RL_action_l77c32,\n  RL_action_l78c18, RL_action_f_init_l83c21, RL_action_l83c94,\n  RL_action_f_update_l83c21, RL_action_f_init_l80c21, RL_action_l81c38,\n  RL_action_f_update_l80c21, RL_actionpar_start_l79c18, RL_action_l88c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l52c18 &&
	  (WILL_FIRE_RL_action_l60c18 || WILL_FIRE_RL_action_l63c32 ||
	   WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 52, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l52c18] and\n  [RL_action_l60c18, RL_action_l63c32, RL_action_l64c18,\n  RL_action_f_init_l69c21, RL_action_l69c91, RL_action_f_update_l69c21,\n  RL_action_f_init_l66c21, RL_action_l67c38, RL_action_f_update_l66c21,\n  RL_actionpar_start_l65c18, RL_action_l74c18, RL_action_l77c32,\n  RL_action_l78c18, RL_action_f_init_l83c21, RL_action_l83c94,\n  RL_action_f_update_l83c21, RL_action_f_init_l80c21, RL_action_l81c38,\n  RL_action_f_update_l80c21, RL_actionpar_start_l79c18, RL_action_l88c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l60c18 &&
	  (WILL_FIRE_RL_action_l63c32 || WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 60, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l60c18] and\n  [RL_action_l63c32, RL_action_l64c18, RL_action_f_init_l69c21,\n  RL_action_l69c91, RL_action_f_update_l69c21, RL_action_f_init_l66c21,\n  RL_action_l67c38, RL_action_f_update_l66c21, RL_actionpar_start_l65c18,\n  RL_action_l74c18, RL_action_l77c32, RL_action_l78c18,\n  RL_action_f_init_l83c21, RL_action_l83c94, RL_action_f_update_l83c21,\n  RL_action_f_init_l80c21, RL_action_l81c38, RL_action_f_update_l80c21,\n  RL_actionpar_start_l79c18, RL_action_l88c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l63c32 &&
	  (WILL_FIRE_RL_action_l64c18 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 63, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l63c32] and\n  [RL_action_l64c18, RL_action_f_init_l69c21, RL_action_l69c91,\n  RL_action_f_update_l69c21, RL_action_f_init_l66c21, RL_action_l67c38,\n  RL_action_f_update_l66c21, RL_actionpar_start_l65c18, RL_action_l74c18,\n  RL_action_l77c32, RL_action_l78c18, RL_action_f_init_l83c21,\n  RL_action_l83c94, RL_action_f_update_l83c21, RL_action_f_init_l80c21,\n  RL_action_l81c38, RL_action_f_update_l80c21, RL_actionpar_start_l79c18,\n  RL_action_l88c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l64c18 &&
	  (par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18 ||
	   WILL_FIRE_RL_action_l74c18 ||
	   WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 64, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l64c18] and\n  [RL_action_f_init_l69c21, RL_action_l69c91, RL_action_f_update_l69c21,\n  RL_action_f_init_l66c21, RL_action_l67c38, RL_action_f_update_l66c21,\n  RL_actionpar_start_l65c18, RL_action_l74c18, RL_action_l77c32,\n  RL_action_l78c18, RL_action_f_init_l83c21, RL_action_l83c94,\n  RL_action_f_update_l83c21, RL_action_f_init_l80c21, RL_action_l81c38,\n  RL_action_f_update_l80c21, RL_actionpar_start_l79c18, RL_action_l88c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (par_running_whas__67_AND_par_running_wget__68__ETC___d186 &&
	  (WILL_FIRE_RL_action_l69c91 || WILL_FIRE_RL_action_f_update_l69c21))
	$display("Error: \"src_BSV/Tb.bsv\", line 69, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l69c21] and\n  [RL_action_l69c91, RL_action_f_update_l69c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((par_running_whas__67_AND_par_running_wget__68__ETC___d186 ||
	   WILL_FIRE_RL_action_l69c91 ||
	   WILL_FIRE_RL_action_f_update_l69c21 ||
	   par_running_whas__67_AND_par_running_wget__68__ETC___d217 ||
	   WILL_FIRE_RL_action_l67c38 ||
	   WILL_FIRE_RL_action_f_update_l66c21 ||
	   WILL_FIRE_RL_actionpar_start_l65c18) &&
	  (WILL_FIRE_RL_action_l74c18 || WILL_FIRE_RL_action_l77c32 ||
	   WILL_FIRE_RL_action_l78c18 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d276 ||
	   WILL_FIRE_RL_action_l83c94 ||
	   WILL_FIRE_RL_action_f_update_l83c21 ||
	   par_running_1_whas__60_AND_par_running_1_wget__ETC___d301 ||
	   WILL_FIRE_RL_action_l81c38 ||
	   WILL_FIRE_RL_action_f_update_l80c21 ||
	   WILL_FIRE_RL_actionpar_start_l79c18 ||
	   WILL_FIRE_RL_action_l88c18))
	$display("Error: \"src_BSV/Tb.bsv\", line 69, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l69c21,\n  RL_action_l69c91, RL_action_f_update_l69c21, RL_action_f_init_l66c21,\n  RL_action_l67c38, RL_action_f_update_l66c21, RL_actionpar_start_l65c18] and\n  [RL_action_l74c18, RL_action_l77c32, RL_action_l78c18,\n  RL_action_f_init_l83c21, RL_action_l83c94, RL_action_f_update_l83c21,\n  RL_action_f_init_l80c21, RL_action_l81c38, RL_action_f_update_l80c21,\n  RL_actionpar_start_l79c18, RL_action_l88c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l69c91 && WILL_FIRE_RL_action_f_update_l69c21)
	$display("Error: \"src_BSV/Tb.bsv\", line 69, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l69c91] and\n  [RL_action_f_update_l69c21] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

