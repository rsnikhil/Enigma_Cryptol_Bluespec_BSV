//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul 16 22:09:01 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// RDY_request_put                O     1 reg
// response_get                   O     8 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I     8 reg
// EN_reset                       I     1
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkModelEnigma(CLK,
		     RST_N,

		     EN_reset,
		     RDY_reset,

		     request_put,
		     EN_request_put,
		     RDY_request_put,

		     EN_response_get,
		     response_get,
		     RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method request_put
  input  [7 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [7 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [7 : 0] response_get;
  wire RDY_request_put, RDY_reset, RDY_response_get;

  // register rg_m
  reg [1117 : 0] rg_m;
  wire [1117 : 0] rg_m$D_IN;
  wire rg_m$EN;

  // register rotor_clicks_0
  reg rotor_clicks_0;
  wire rotor_clicks_0$D_IN, rotor_clicks_0$EN;

  // register rotor_clicks_1
  reg rotor_clicks_1;
  wire rotor_clicks_1$D_IN, rotor_clicks_1$EN;

  // register rotor_clicks_2
  reg rotor_clicks_2;
  wire rotor_clicks_2$D_IN, rotor_clicks_2$EN;

  // ports of submodule fifo_in
  wire [7 : 0] fifo_in$D_IN, fifo_in$D_OUT;
  wire fifo_in$CLR, fifo_in$DEQ, fifo_in$EMPTY_N, fifo_in$ENQ, fifo_in$FULL_N;

  // ports of submodule fifo_out
  wire [7 : 0] fifo_out$D_IN, fifo_out$D_OUT;
  wire fifo_out$CLR,
       fifo_out$DEQ,
       fifo_out$EMPTY_N,
       fifo_out$ENQ,
       fifo_out$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_process_char,
       CAN_FIRE_request_put,
       CAN_FIRE_reset,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_rl_process_char,
       WILL_FIRE_request_put,
       WILL_FIRE_reset,
       WILL_FIRE_response_get;

  // inputs to muxes for submodule ports
  wire [1117 : 0] MUX_rg_m$write_1__VAL_2;
  wire MUX_rotor_clicks_0$write_1__VAL_2,
       MUX_rotor_clicks_1$write_1__VAL_2,
       MUX_rotor_clicks_2$write_1__VAL_2;

  // remaining internal signals
  reg [7 : 0] c__h1097, c__h1264, c__h1486, c__h1509, c__h1532;
  wire [7 : 0] c4__h557,
	       c__h757,
	       c__h927,
	       x__h1266,
	       x__h1492,
	       x__h1515,
	       x__h1538,
	       x__h1557,
	       y__h28749,
	       y__h28767,
	       y__h28785,
	       y__h28803,
	       y__h28821,
	       y__h28839,
	       y__h28857,
	       y__h28875,
	       y__h28893,
	       y__h28911,
	       y__h28929,
	       y__h28947,
	       y__h28965,
	       y__h28983,
	       y__h29001,
	       y__h29019,
	       y__h29037,
	       y__h29055,
	       y__h29073,
	       y__h29091,
	       y__h29109,
	       y__h29127,
	       y__h29145,
	       y__h29163,
	       y__h29181,
	       y__h29199,
	       y__h29364,
	       y__h29382,
	       y__h29400,
	       y__h29418,
	       y__h29436,
	       y__h29454,
	       y__h29472,
	       y__h29490,
	       y__h29508,
	       y__h29526,
	       y__h29544,
	       y__h29562,
	       y__h29580,
	       y__h29598,
	       y__h29616,
	       y__h29634,
	       y__h29652,
	       y__h29670,
	       y__h29688,
	       y__h29706,
	       y__h29724,
	       y__h29742,
	       y__h29760,
	       y__h29778,
	       y__h29796,
	       y__h29814;
  wire NOT_rg_m_BITS_459_TO_452_0_EQ_IF_rg_m_BIT_208__ETC___d787,
       NOT_rg_m_BITS_486_TO_479_3_EQ_IF_rg_m_BIT_208__ETC___d784,
       NOT_rg_m_BITS_513_TO_506_6_EQ_IF_rg_m_BIT_208__ETC___d781,
       NOT_rg_m_BITS_540_TO_533_9_EQ_IF_rg_m_BIT_208__ETC___d778,
       NOT_rg_m_BITS_567_TO_560_2_EQ_IF_rg_m_BIT_208__ETC___d775,
       NOT_rg_m_BITS_594_TO_587_5_EQ_IF_rg_m_BIT_208__ETC___d772,
       NOT_rg_m_BITS_621_TO_614_8_EQ_IF_rg_m_BIT_208__ETC___d769,
       NOT_rg_m_BITS_648_TO_641_1_EQ_IF_rg_m_BIT_208__ETC___d766,
       NOT_rg_m_BITS_693_TO_686_3_EQ_IF_rg_m_BIT_442__ETC___d1020,
       NOT_rg_m_BITS_720_TO_713_6_EQ_IF_rg_m_BIT_442__ETC___d1017,
       NOT_rg_m_BITS_747_TO_740_9_EQ_IF_rg_m_BIT_442__ETC___d1014,
       NOT_rg_m_BITS_774_TO_767_2_EQ_IF_rg_m_BIT_442__ETC___d1011,
       NOT_rg_m_BITS_801_TO_794_5_EQ_IF_rg_m_BIT_442__ETC___d1008,
       NOT_rg_m_BITS_828_TO_821_8_EQ_IF_rg_m_BIT_442__ETC___d1005,
       NOT_rg_m_BITS_855_TO_848_1_EQ_IF_rg_m_BIT_442__ETC___d1002,
       NOT_rg_m_BITS_882_TO_875_4_EQ_IF_rg_m_BIT_442__ETC___d999;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method request_put
  assign RDY_request_put = fifo_in$FULL_N ;
  assign CAN_FIRE_request_put = fifo_in$FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = fifo_out$D_OUT ;
  assign RDY_response_get = fifo_out$EMPTY_N ;
  assign CAN_FIRE_response_get = fifo_out$EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule fifo_in
  FIFO2 #(.width(32'd8), .guarded(32'd1)) fifo_in(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(fifo_in$D_IN),
						  .ENQ(fifo_in$ENQ),
						  .DEQ(fifo_in$DEQ),
						  .CLR(fifo_in$CLR),
						  .D_OUT(fifo_in$D_OUT),
						  .FULL_N(fifo_in$FULL_N),
						  .EMPTY_N(fifo_in$EMPTY_N));

  // submodule fifo_out
  FIFO2 #(.width(32'd8), .guarded(32'd1)) fifo_out(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fifo_out$D_IN),
						   .ENQ(fifo_out$ENQ),
						   .DEQ(fifo_out$DEQ),
						   .CLR(fifo_out$CLR),
						   .D_OUT(fifo_out$D_OUT),
						   .FULL_N(fifo_out$FULL_N),
						   .EMPTY_N(fifo_out$EMPTY_N));

  // rule RL_rl_process_char
  assign CAN_FIRE_RL_rl_process_char = fifo_in$EMPTY_N && fifo_out$FULL_N ;
  assign WILL_FIRE_RL_rl_process_char = CAN_FIRE_RL_rl_process_char ;

  // inputs to muxes for submodule ports
  assign MUX_rg_m$write_1__VAL_2 =
	     { rg_m[1117:910],
	       rg_m[442] ? { rg_m[684:676], rg_m[909:685] } : rg_m[909:676],
	       rg_m[208] ? { rg_m[450:442], rg_m[675:451] } : rg_m[675:442],
	       rg_m[216:208],
	       rg_m[441:217],
	       rg_m[207:0] } ;
  assign MUX_rotor_clicks_0$write_1__VAL_2 =
	     rg_m[225:218] != rg_m[234:227] || rg_m[217] != rg_m[226] ||
	     rg_m[234:227] != rg_m[243:236] ||
	     rg_m[226] != rg_m[235] ||
	     rg_m[243:236] != rg_m[252:245] ||
	     rg_m[235] != rg_m[244] ||
	     rg_m[252:245] != rg_m[261:254] ||
	     rg_m[244] != rg_m[253] ||
	     rg_m[261:254] != rg_m[270:263] ||
	     rg_m[253] != rg_m[262] ||
	     rg_m[270:263] != rg_m[279:272] ||
	     rg_m[262] != rg_m[271] ||
	     rg_m[279:272] != rg_m[288:281] ||
	     rg_m[271] != rg_m[280] ||
	     rg_m[288:281] != rg_m[297:290] ||
	     rg_m[280] != rg_m[289] ||
	     rg_m[297:290] != rg_m[306:299] ||
	     rg_m[289] != rg_m[298] ||
	     rg_m[306:299] != rg_m[315:308] ||
	     rg_m[298] != rg_m[307] ||
	     rg_m[315:308] != rg_m[324:317] ||
	     rg_m[307] != rg_m[316] ||
	     rg_m[324:317] != rg_m[333:326] ||
	     rg_m[316] != rg_m[325] ||
	     rg_m[333:326] != rg_m[342:335] ||
	     rg_m[325] != rg_m[334] ||
	     rg_m[342:335] != rg_m[351:344] ||
	     rg_m[334] != rg_m[343] ||
	     rg_m[351:344] != rg_m[360:353] ||
	     rg_m[343] != rg_m[352] ||
	     rg_m[360:353] != rg_m[369:362] ||
	     rg_m[352] != rg_m[361] ||
	     rg_m[369:362] != rg_m[378:371] ||
	     rg_m[361] != rg_m[370] ||
	     rg_m[378:371] != rg_m[387:380] ||
	     rg_m[370] != rg_m[379] ||
	     rg_m[387:380] != rg_m[396:389] ||
	     rg_m[379] != rg_m[388] ||
	     rg_m[396:389] != rg_m[405:398] ||
	     rg_m[388] != rg_m[397] ||
	     rg_m[405:398] != rg_m[414:407] ||
	     rg_m[397] != rg_m[406] ||
	     rg_m[414:407] != rg_m[423:416] ||
	     rg_m[406] != rg_m[415] ||
	     rg_m[423:416] != rg_m[432:425] ||
	     rg_m[415] != rg_m[424] ||
	     rg_m[432:425] != rg_m[441:434] ||
	     rg_m[424] != rg_m[433] ||
	     rg_m[441:434] != rg_m[216:209] ||
	     rg_m[433] != rg_m[208] ;
  assign MUX_rotor_clicks_1$write_1__VAL_2 =
	     rg_m[450:443] != y__h28749 ||
	     rg_m[442] != (rg_m[208] ? rg_m[451] : rg_m[442]) ||
	     NOT_rg_m_BITS_459_TO_452_0_EQ_IF_rg_m_BIT_208__ETC___d787 ;
  assign MUX_rotor_clicks_2$write_1__VAL_2 =
	     rg_m[684:677] != y__h29364 ||
	     rg_m[676] != (rg_m[442] ? rg_m[685] : rg_m[676]) ||
	     NOT_rg_m_BITS_693_TO_686_3_EQ_IF_rg_m_BIT_442__ETC___d1020 ;

  // register rg_m
  assign rg_m$D_IN =
	     EN_reset ?
	       1118'h1695545355165594D49614131395D3D2D2925050D1915111D0921508A5A24964A44E2B13CAA57251049A4BA3918B05121D3084482994088572210485432C11C924629934945A291549050289589C4B2A114984F2C95C824324D28A4422393896542694CB04822918B2502A930884FAD144AC4E4A524D4B4C4748584F44515A57555659435354414250494546 :
	       MUX_rg_m$write_1__VAL_2 ;
  assign rg_m$EN = WILL_FIRE_RL_rl_process_char || EN_reset ;

  // register rotor_clicks_0
  assign rotor_clicks_0$D_IN =
	     !EN_reset && MUX_rotor_clicks_0$write_1__VAL_2 ;
  assign rotor_clicks_0$EN = WILL_FIRE_RL_rl_process_char || EN_reset ;

  // register rotor_clicks_1
  assign rotor_clicks_1$D_IN =
	     !EN_reset && MUX_rotor_clicks_1$write_1__VAL_2 ;
  assign rotor_clicks_1$EN = WILL_FIRE_RL_rl_process_char || EN_reset ;

  // register rotor_clicks_2
  assign rotor_clicks_2$D_IN =
	     !EN_reset && MUX_rotor_clicks_2$write_1__VAL_2 ;
  assign rotor_clicks_2$EN = WILL_FIRE_RL_rl_process_char || EN_reset ;

  // submodule fifo_in
  assign fifo_in$D_IN = request_put ;
  assign fifo_in$ENQ = EN_request_put ;
  assign fifo_in$DEQ = CAN_FIRE_RL_rl_process_char ;
  assign fifo_in$CLR = 1'b0 ;

  // submodule fifo_out
  assign fifo_out$D_IN =
	     (c4__h557 == rg_m[1117:1110]) ?
	       8'd90 :
	       ((c4__h557 == rg_m[1109:1102]) ?
		  8'd89 :
		  ((c4__h557 == rg_m[1101:1094]) ?
		     8'd88 :
		     ((c4__h557 == rg_m[1093:1086]) ?
			8'd87 :
			((c4__h557 == rg_m[1085:1078]) ?
			   8'd86 :
			   ((c4__h557 == rg_m[1077:1070]) ?
			      8'd85 :
			      ((c4__h557 == rg_m[1069:1062]) ?
				 8'd84 :
				 ((c4__h557 == rg_m[1061:1054]) ?
				    8'd83 :
				    ((c4__h557 == rg_m[1053:1046]) ?
				       8'd82 :
				       ((c4__h557 == rg_m[1045:1038]) ?
					  8'd81 :
					  ((c4__h557 == rg_m[1037:1030]) ?
					     8'd80 :
					     ((c4__h557 == rg_m[1029:1022]) ?
						8'd79 :
						((c4__h557 ==
						  rg_m[1021:1014]) ?
						   8'd78 :
						   ((c4__h557 ==
						     rg_m[1013:1006]) ?
						      8'd77 :
						      ((c4__h557 ==
							rg_m[1005:998]) ?
							 8'd76 :
							 ((c4__h557 ==
							   rg_m[997:990]) ?
							    8'd75 :
							    ((c4__h557 ==
							      rg_m[989:982]) ?
							       8'd74 :
							       ((c4__h557 ==
								 rg_m[981:974]) ?
								  8'd73 :
								  ((c4__h557 ==
								    rg_m[973:966]) ?
								     8'd72 :
								     ((c4__h557 ==
								       rg_m[965:958]) ?
									8'd71 :
									((c4__h557 ==
									  rg_m[957:950]) ?
									   8'd70 :
									   ((c4__h557 ==
									     rg_m[949:942]) ?
									      8'd69 :
									      ((c4__h557 ==
										rg_m[941:934]) ?
										 8'd68 :
										 ((c4__h557 ==
										   rg_m[933:926]) ?
										    8'd67 :
										    ((c4__h557 ==
										      rg_m[925:918]) ?
										       8'd66 :
										       8'd65)))))))))))))))))))))))) ;
  assign fifo_out$ENQ = CAN_FIRE_RL_rl_process_char ;
  assign fifo_out$DEQ = EN_response_get ;
  assign fifo_out$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_rg_m_BITS_459_TO_452_0_EQ_IF_rg_m_BIT_208__ETC___d787 =
	     rg_m[459:452] != y__h28767 ||
	     rg_m[451] != (rg_m[208] ? rg_m[460] : rg_m[451]) ||
	     rg_m[468:461] != y__h28785 ||
	     rg_m[460] != (rg_m[208] ? rg_m[469] : rg_m[460]) ||
	     rg_m[477:470] != y__h28803 ||
	     rg_m[469] != (rg_m[208] ? rg_m[478] : rg_m[469]) ||
	     NOT_rg_m_BITS_486_TO_479_3_EQ_IF_rg_m_BIT_208__ETC___d784 ;
  assign NOT_rg_m_BITS_486_TO_479_3_EQ_IF_rg_m_BIT_208__ETC___d784 =
	     rg_m[486:479] != y__h28821 ||
	     rg_m[478] != (rg_m[208] ? rg_m[487] : rg_m[478]) ||
	     rg_m[495:488] != y__h28839 ||
	     rg_m[487] != (rg_m[208] ? rg_m[496] : rg_m[487]) ||
	     rg_m[504:497] != y__h28857 ||
	     rg_m[496] != (rg_m[208] ? rg_m[505] : rg_m[496]) ||
	     NOT_rg_m_BITS_513_TO_506_6_EQ_IF_rg_m_BIT_208__ETC___d781 ;
  assign NOT_rg_m_BITS_513_TO_506_6_EQ_IF_rg_m_BIT_208__ETC___d781 =
	     rg_m[513:506] != y__h28875 ||
	     rg_m[505] != (rg_m[208] ? rg_m[514] : rg_m[505]) ||
	     rg_m[522:515] != y__h28893 ||
	     rg_m[514] != (rg_m[208] ? rg_m[523] : rg_m[514]) ||
	     rg_m[531:524] != y__h28911 ||
	     rg_m[523] != (rg_m[208] ? rg_m[532] : rg_m[523]) ||
	     NOT_rg_m_BITS_540_TO_533_9_EQ_IF_rg_m_BIT_208__ETC___d778 ;
  assign NOT_rg_m_BITS_540_TO_533_9_EQ_IF_rg_m_BIT_208__ETC___d778 =
	     rg_m[540:533] != y__h28929 ||
	     rg_m[532] != (rg_m[208] ? rg_m[541] : rg_m[532]) ||
	     rg_m[549:542] != y__h28947 ||
	     rg_m[541] != (rg_m[208] ? rg_m[550] : rg_m[541]) ||
	     rg_m[558:551] != y__h28965 ||
	     rg_m[550] != (rg_m[208] ? rg_m[559] : rg_m[550]) ||
	     NOT_rg_m_BITS_567_TO_560_2_EQ_IF_rg_m_BIT_208__ETC___d775 ;
  assign NOT_rg_m_BITS_567_TO_560_2_EQ_IF_rg_m_BIT_208__ETC___d775 =
	     rg_m[567:560] != y__h28983 ||
	     rg_m[559] != (rg_m[208] ? rg_m[568] : rg_m[559]) ||
	     rg_m[576:569] != y__h29001 ||
	     rg_m[568] != (rg_m[208] ? rg_m[577] : rg_m[568]) ||
	     rg_m[585:578] != y__h29019 ||
	     rg_m[577] != (rg_m[208] ? rg_m[586] : rg_m[577]) ||
	     NOT_rg_m_BITS_594_TO_587_5_EQ_IF_rg_m_BIT_208__ETC___d772 ;
  assign NOT_rg_m_BITS_594_TO_587_5_EQ_IF_rg_m_BIT_208__ETC___d772 =
	     rg_m[594:587] != y__h29037 ||
	     rg_m[586] != (rg_m[208] ? rg_m[595] : rg_m[586]) ||
	     rg_m[603:596] != y__h29055 ||
	     rg_m[595] != (rg_m[208] ? rg_m[604] : rg_m[595]) ||
	     rg_m[612:605] != y__h29073 ||
	     rg_m[604] != (rg_m[208] ? rg_m[613] : rg_m[604]) ||
	     NOT_rg_m_BITS_621_TO_614_8_EQ_IF_rg_m_BIT_208__ETC___d769 ;
  assign NOT_rg_m_BITS_621_TO_614_8_EQ_IF_rg_m_BIT_208__ETC___d769 =
	     rg_m[621:614] != y__h29091 ||
	     rg_m[613] != (rg_m[208] ? rg_m[622] : rg_m[613]) ||
	     rg_m[630:623] != y__h29109 ||
	     rg_m[622] != (rg_m[208] ? rg_m[631] : rg_m[622]) ||
	     rg_m[639:632] != y__h29127 ||
	     rg_m[631] != (rg_m[208] ? rg_m[640] : rg_m[631]) ||
	     NOT_rg_m_BITS_648_TO_641_1_EQ_IF_rg_m_BIT_208__ETC___d766 ;
  assign NOT_rg_m_BITS_648_TO_641_1_EQ_IF_rg_m_BIT_208__ETC___d766 =
	     rg_m[648:641] != y__h29145 ||
	     rg_m[640] != (rg_m[208] ? rg_m[649] : rg_m[640]) ||
	     rg_m[657:650] != y__h29163 ||
	     rg_m[649] != (rg_m[208] ? rg_m[658] : rg_m[649]) ||
	     rg_m[666:659] != y__h29181 ||
	     rg_m[658] != (rg_m[208] ? rg_m[667] : rg_m[658]) ||
	     rg_m[675:668] != y__h29199 ||
	     rg_m[667] != (rg_m[208] ? rg_m[442] : rg_m[667]) ;
  assign NOT_rg_m_BITS_693_TO_686_3_EQ_IF_rg_m_BIT_442__ETC___d1020 =
	     rg_m[693:686] != y__h29382 ||
	     rg_m[685] != (rg_m[442] ? rg_m[694] : rg_m[685]) ||
	     rg_m[702:695] != y__h29400 ||
	     rg_m[694] != (rg_m[442] ? rg_m[703] : rg_m[694]) ||
	     rg_m[711:704] != y__h29418 ||
	     rg_m[703] != (rg_m[442] ? rg_m[712] : rg_m[703]) ||
	     NOT_rg_m_BITS_720_TO_713_6_EQ_IF_rg_m_BIT_442__ETC___d1017 ;
  assign NOT_rg_m_BITS_720_TO_713_6_EQ_IF_rg_m_BIT_442__ETC___d1017 =
	     rg_m[720:713] != y__h29436 ||
	     rg_m[712] != (rg_m[442] ? rg_m[721] : rg_m[712]) ||
	     rg_m[729:722] != y__h29454 ||
	     rg_m[721] != (rg_m[442] ? rg_m[730] : rg_m[721]) ||
	     rg_m[738:731] != y__h29472 ||
	     rg_m[730] != (rg_m[442] ? rg_m[739] : rg_m[730]) ||
	     NOT_rg_m_BITS_747_TO_740_9_EQ_IF_rg_m_BIT_442__ETC___d1014 ;
  assign NOT_rg_m_BITS_747_TO_740_9_EQ_IF_rg_m_BIT_442__ETC___d1014 =
	     rg_m[747:740] != y__h29490 ||
	     rg_m[739] != (rg_m[442] ? rg_m[748] : rg_m[739]) ||
	     rg_m[756:749] != y__h29508 ||
	     rg_m[748] != (rg_m[442] ? rg_m[757] : rg_m[748]) ||
	     rg_m[765:758] != y__h29526 ||
	     rg_m[757] != (rg_m[442] ? rg_m[766] : rg_m[757]) ||
	     NOT_rg_m_BITS_774_TO_767_2_EQ_IF_rg_m_BIT_442__ETC___d1011 ;
  assign NOT_rg_m_BITS_774_TO_767_2_EQ_IF_rg_m_BIT_442__ETC___d1011 =
	     rg_m[774:767] != y__h29544 ||
	     rg_m[766] != (rg_m[442] ? rg_m[775] : rg_m[766]) ||
	     rg_m[783:776] != y__h29562 ||
	     rg_m[775] != (rg_m[442] ? rg_m[784] : rg_m[775]) ||
	     rg_m[792:785] != y__h29580 ||
	     rg_m[784] != (rg_m[442] ? rg_m[793] : rg_m[784]) ||
	     NOT_rg_m_BITS_801_TO_794_5_EQ_IF_rg_m_BIT_442__ETC___d1008 ;
  assign NOT_rg_m_BITS_801_TO_794_5_EQ_IF_rg_m_BIT_442__ETC___d1008 =
	     rg_m[801:794] != y__h29598 ||
	     rg_m[793] != (rg_m[442] ? rg_m[802] : rg_m[793]) ||
	     rg_m[810:803] != y__h29616 ||
	     rg_m[802] != (rg_m[442] ? rg_m[811] : rg_m[802]) ||
	     rg_m[819:812] != y__h29634 ||
	     rg_m[811] != (rg_m[442] ? rg_m[820] : rg_m[811]) ||
	     NOT_rg_m_BITS_828_TO_821_8_EQ_IF_rg_m_BIT_442__ETC___d1005 ;
  assign NOT_rg_m_BITS_828_TO_821_8_EQ_IF_rg_m_BIT_442__ETC___d1005 =
	     rg_m[828:821] != y__h29652 ||
	     rg_m[820] != (rg_m[442] ? rg_m[829] : rg_m[820]) ||
	     rg_m[837:830] != y__h29670 ||
	     rg_m[829] != (rg_m[442] ? rg_m[838] : rg_m[829]) ||
	     rg_m[846:839] != y__h29688 ||
	     rg_m[838] != (rg_m[442] ? rg_m[847] : rg_m[838]) ||
	     NOT_rg_m_BITS_855_TO_848_1_EQ_IF_rg_m_BIT_442__ETC___d1002 ;
  assign NOT_rg_m_BITS_855_TO_848_1_EQ_IF_rg_m_BIT_442__ETC___d1002 =
	     rg_m[855:848] != y__h29706 ||
	     rg_m[847] != (rg_m[442] ? rg_m[856] : rg_m[847]) ||
	     rg_m[864:857] != y__h29724 ||
	     rg_m[856] != (rg_m[442] ? rg_m[865] : rg_m[856]) ||
	     rg_m[873:866] != y__h29742 ||
	     rg_m[865] != (rg_m[442] ? rg_m[874] : rg_m[865]) ||
	     NOT_rg_m_BITS_882_TO_875_4_EQ_IF_rg_m_BIT_442__ETC___d999 ;
  assign NOT_rg_m_BITS_882_TO_875_4_EQ_IF_rg_m_BIT_442__ETC___d999 =
	     rg_m[882:875] != y__h29760 ||
	     rg_m[874] != (rg_m[442] ? rg_m[883] : rg_m[874]) ||
	     rg_m[891:884] != y__h29778 ||
	     rg_m[883] != (rg_m[442] ? rg_m[892] : rg_m[883]) ||
	     rg_m[900:893] != y__h29796 ||
	     rg_m[892] != (rg_m[442] ? rg_m[901] : rg_m[892]) ||
	     rg_m[909:902] != y__h29814 ||
	     rg_m[901] != (rg_m[442] ? rg_m[676] : rg_m[901]) ;
  assign c4__h557 =
	     (c__h757 == rg_m[441:434]) ?
	       8'd90 :
	       ((c__h757 == rg_m[432:425]) ?
		  8'd89 :
		  ((c__h757 == rg_m[423:416]) ?
		     8'd88 :
		     ((c__h757 == rg_m[414:407]) ?
			8'd87 :
			((c__h757 == rg_m[405:398]) ?
			   8'd86 :
			   ((c__h757 == rg_m[396:389]) ?
			      8'd85 :
			      ((c__h757 == rg_m[387:380]) ?
				 8'd84 :
				 ((c__h757 == rg_m[378:371]) ?
				    8'd83 :
				    ((c__h757 == rg_m[369:362]) ?
				       8'd82 :
				       ((c__h757 == rg_m[360:353]) ?
					  8'd81 :
					  ((c__h757 == rg_m[351:344]) ?
					     8'd80 :
					     ((c__h757 == rg_m[342:335]) ?
						8'd79 :
						((c__h757 == rg_m[333:326]) ?
						   8'd78 :
						   ((c__h757 ==
						     rg_m[324:317]) ?
						      8'd77 :
						      ((c__h757 ==
							rg_m[315:308]) ?
							 8'd76 :
							 ((c__h757 ==
							   rg_m[306:299]) ?
							    8'd75 :
							    ((c__h757 ==
							      rg_m[297:290]) ?
							       8'd74 :
							       ((c__h757 ==
								 rg_m[288:281]) ?
								  8'd73 :
								  ((c__h757 ==
								    rg_m[279:272]) ?
								     8'd72 :
								     ((c__h757 ==
								       rg_m[270:263]) ?
									8'd71 :
									((c__h757 ==
									  rg_m[261:254]) ?
									   8'd70 :
									   ((c__h757 ==
									     rg_m[252:245]) ?
									      8'd69 :
									      ((c__h757 ==
										rg_m[243:236]) ?
										 8'd68 :
										 ((c__h757 ==
										   rg_m[234:227]) ?
										    8'd67 :
										    ((c__h757 ==
										      rg_m[225:218]) ?
										       8'd66 :
										       8'd65)))))))))))))))))))))))) ;
  assign c__h757 =
	     (c__h927 == rg_m[675:668]) ?
	       8'd90 :
	       ((c__h927 == rg_m[666:659]) ?
		  8'd89 :
		  ((c__h927 == rg_m[657:650]) ?
		     8'd88 :
		     ((c__h927 == rg_m[648:641]) ?
			8'd87 :
			((c__h927 == rg_m[639:632]) ?
			   8'd86 :
			   ((c__h927 == rg_m[630:623]) ?
			      8'd85 :
			      ((c__h927 == rg_m[621:614]) ?
				 8'd84 :
				 ((c__h927 == rg_m[612:605]) ?
				    8'd83 :
				    ((c__h927 == rg_m[603:596]) ?
				       8'd82 :
				       ((c__h927 == rg_m[594:587]) ?
					  8'd81 :
					  ((c__h927 == rg_m[585:578]) ?
					     8'd80 :
					     ((c__h927 == rg_m[576:569]) ?
						8'd79 :
						((c__h927 == rg_m[567:560]) ?
						   8'd78 :
						   ((c__h927 ==
						     rg_m[558:551]) ?
						      8'd77 :
						      ((c__h927 ==
							rg_m[549:542]) ?
							 8'd76 :
							 ((c__h927 ==
							   rg_m[540:533]) ?
							    8'd75 :
							    ((c__h927 ==
							      rg_m[531:524]) ?
							       8'd74 :
							       ((c__h927 ==
								 rg_m[522:515]) ?
								  8'd73 :
								  ((c__h927 ==
								    rg_m[513:506]) ?
								     8'd72 :
								     ((c__h927 ==
								       rg_m[504:497]) ?
									8'd71 :
									((c__h927 ==
									  rg_m[495:488]) ?
									   8'd70 :
									   ((c__h927 ==
									     rg_m[486:479]) ?
									      8'd69 :
									      ((c__h927 ==
										rg_m[477:470]) ?
										 8'd68 :
										 ((c__h927 ==
										   rg_m[468:461]) ?
										    8'd67 :
										    ((c__h927 ==
										      rg_m[459:452]) ?
										       8'd66 :
										       8'd65)))))))))))))))))))))))) ;
  assign c__h927 =
	     (c__h1097 == rg_m[909:902]) ?
	       8'd90 :
	       ((c__h1097 == rg_m[900:893]) ?
		  8'd89 :
		  ((c__h1097 == rg_m[891:884]) ?
		     8'd88 :
		     ((c__h1097 == rg_m[882:875]) ?
			8'd87 :
			((c__h1097 == rg_m[873:866]) ?
			   8'd86 :
			   ((c__h1097 == rg_m[864:857]) ?
			      8'd85 :
			      ((c__h1097 == rg_m[855:848]) ?
				 8'd84 :
				 ((c__h1097 == rg_m[846:839]) ?
				    8'd83 :
				    ((c__h1097 == rg_m[837:830]) ?
				       8'd82 :
				       ((c__h1097 == rg_m[828:821]) ?
					  8'd81 :
					  ((c__h1097 == rg_m[819:812]) ?
					     8'd80 :
					     ((c__h1097 == rg_m[810:803]) ?
						8'd79 :
						((c__h1097 == rg_m[801:794]) ?
						   8'd78 :
						   ((c__h1097 ==
						     rg_m[792:785]) ?
						      8'd77 :
						      ((c__h1097 ==
							rg_m[783:776]) ?
							 8'd76 :
							 ((c__h1097 ==
							   rg_m[774:767]) ?
							    8'd75 :
							    ((c__h1097 ==
							      rg_m[765:758]) ?
							       8'd74 :
							       ((c__h1097 ==
								 rg_m[756:749]) ?
								  8'd73 :
								  ((c__h1097 ==
								    rg_m[747:740]) ?
								     8'd72 :
								     ((c__h1097 ==
								       rg_m[738:731]) ?
									8'd71 :
									((c__h1097 ==
									  rg_m[729:722]) ?
									   8'd70 :
									   ((c__h1097 ==
									     rg_m[720:713]) ?
									      8'd69 :
									      ((c__h1097 ==
										rg_m[711:704]) ?
										 8'd68 :
										 ((c__h1097 ==
										   rg_m[702:695]) ?
										    8'd67 :
										    ((c__h1097 ==
										      rg_m[693:686]) ?
										       8'd66 :
										       8'd65)))))))))))))))))))))))) ;
  assign x__h1266 = c__h1264 - 8'd65 ;
  assign x__h1492 = c__h1486 - 8'd65 ;
  assign x__h1515 = c__h1509 - 8'd65 ;
  assign x__h1538 = c__h1532 - 8'd65 ;
  assign x__h1557 = fifo_in$D_OUT - 8'd65 ;
  assign y__h28749 = rg_m[208] ? rg_m[459:452] : rg_m[450:443] ;
  assign y__h28767 = rg_m[208] ? rg_m[468:461] : rg_m[459:452] ;
  assign y__h28785 = rg_m[208] ? rg_m[477:470] : rg_m[468:461] ;
  assign y__h28803 = rg_m[208] ? rg_m[486:479] : rg_m[477:470] ;
  assign y__h28821 = rg_m[208] ? rg_m[495:488] : rg_m[486:479] ;
  assign y__h28839 = rg_m[208] ? rg_m[504:497] : rg_m[495:488] ;
  assign y__h28857 = rg_m[208] ? rg_m[513:506] : rg_m[504:497] ;
  assign y__h28875 = rg_m[208] ? rg_m[522:515] : rg_m[513:506] ;
  assign y__h28893 = rg_m[208] ? rg_m[531:524] : rg_m[522:515] ;
  assign y__h28911 = rg_m[208] ? rg_m[540:533] : rg_m[531:524] ;
  assign y__h28929 = rg_m[208] ? rg_m[549:542] : rg_m[540:533] ;
  assign y__h28947 = rg_m[208] ? rg_m[558:551] : rg_m[549:542] ;
  assign y__h28965 = rg_m[208] ? rg_m[567:560] : rg_m[558:551] ;
  assign y__h28983 = rg_m[208] ? rg_m[576:569] : rg_m[567:560] ;
  assign y__h29001 = rg_m[208] ? rg_m[585:578] : rg_m[576:569] ;
  assign y__h29019 = rg_m[208] ? rg_m[594:587] : rg_m[585:578] ;
  assign y__h29037 = rg_m[208] ? rg_m[603:596] : rg_m[594:587] ;
  assign y__h29055 = rg_m[208] ? rg_m[612:605] : rg_m[603:596] ;
  assign y__h29073 = rg_m[208] ? rg_m[621:614] : rg_m[612:605] ;
  assign y__h29091 = rg_m[208] ? rg_m[630:623] : rg_m[621:614] ;
  assign y__h29109 = rg_m[208] ? rg_m[639:632] : rg_m[630:623] ;
  assign y__h29127 = rg_m[208] ? rg_m[648:641] : rg_m[639:632] ;
  assign y__h29145 = rg_m[208] ? rg_m[657:650] : rg_m[648:641] ;
  assign y__h29163 = rg_m[208] ? rg_m[666:659] : rg_m[657:650] ;
  assign y__h29181 = rg_m[208] ? rg_m[675:668] : rg_m[666:659] ;
  assign y__h29199 = rg_m[208] ? rg_m[450:443] : rg_m[675:668] ;
  assign y__h29364 = rg_m[442] ? rg_m[693:686] : rg_m[684:677] ;
  assign y__h29382 = rg_m[442] ? rg_m[702:695] : rg_m[693:686] ;
  assign y__h29400 = rg_m[442] ? rg_m[711:704] : rg_m[702:695] ;
  assign y__h29418 = rg_m[442] ? rg_m[720:713] : rg_m[711:704] ;
  assign y__h29436 = rg_m[442] ? rg_m[729:722] : rg_m[720:713] ;
  assign y__h29454 = rg_m[442] ? rg_m[738:731] : rg_m[729:722] ;
  assign y__h29472 = rg_m[442] ? rg_m[747:740] : rg_m[738:731] ;
  assign y__h29490 = rg_m[442] ? rg_m[756:749] : rg_m[747:740] ;
  assign y__h29508 = rg_m[442] ? rg_m[765:758] : rg_m[756:749] ;
  assign y__h29526 = rg_m[442] ? rg_m[774:767] : rg_m[765:758] ;
  assign y__h29544 = rg_m[442] ? rg_m[783:776] : rg_m[774:767] ;
  assign y__h29562 = rg_m[442] ? rg_m[792:785] : rg_m[783:776] ;
  assign y__h29580 = rg_m[442] ? rg_m[801:794] : rg_m[792:785] ;
  assign y__h29598 = rg_m[442] ? rg_m[810:803] : rg_m[801:794] ;
  assign y__h29616 = rg_m[442] ? rg_m[819:812] : rg_m[810:803] ;
  assign y__h29634 = rg_m[442] ? rg_m[828:821] : rg_m[819:812] ;
  assign y__h29652 = rg_m[442] ? rg_m[837:830] : rg_m[828:821] ;
  assign y__h29670 = rg_m[442] ? rg_m[846:839] : rg_m[837:830] ;
  assign y__h29688 = rg_m[442] ? rg_m[855:848] : rg_m[846:839] ;
  assign y__h29706 = rg_m[442] ? rg_m[864:857] : rg_m[855:848] ;
  assign y__h29724 = rg_m[442] ? rg_m[873:866] : rg_m[864:857] ;
  assign y__h29742 = rg_m[442] ? rg_m[882:875] : rg_m[873:866] ;
  assign y__h29760 = rg_m[442] ? rg_m[891:884] : rg_m[882:875] ;
  assign y__h29778 = rg_m[442] ? rg_m[900:893] : rg_m[891:884] ;
  assign y__h29796 = rg_m[442] ? rg_m[909:902] : rg_m[900:893] ;
  assign y__h29814 = rg_m[442] ? rg_m[684:677] : rg_m[909:902] ;
  always@(x__h1557 or rg_m)
  begin
    case (x__h1557)
      8'd0: c__h1532 = rg_m[917:910];
      8'd1: c__h1532 = rg_m[925:918];
      8'd2: c__h1532 = rg_m[933:926];
      8'd3: c__h1532 = rg_m[941:934];
      8'd4: c__h1532 = rg_m[949:942];
      8'd5: c__h1532 = rg_m[957:950];
      8'd6: c__h1532 = rg_m[965:958];
      8'd7: c__h1532 = rg_m[973:966];
      8'd8: c__h1532 = rg_m[981:974];
      8'd9: c__h1532 = rg_m[989:982];
      8'd10: c__h1532 = rg_m[997:990];
      8'd11: c__h1532 = rg_m[1005:998];
      8'd12: c__h1532 = rg_m[1013:1006];
      8'd13: c__h1532 = rg_m[1021:1014];
      8'd14: c__h1532 = rg_m[1029:1022];
      8'd15: c__h1532 = rg_m[1037:1030];
      8'd16: c__h1532 = rg_m[1045:1038];
      8'd17: c__h1532 = rg_m[1053:1046];
      8'd18: c__h1532 = rg_m[1061:1054];
      8'd19: c__h1532 = rg_m[1069:1062];
      8'd20: c__h1532 = rg_m[1077:1070];
      8'd21: c__h1532 = rg_m[1085:1078];
      8'd22: c__h1532 = rg_m[1093:1086];
      8'd23: c__h1532 = rg_m[1101:1094];
      8'd24: c__h1532 = rg_m[1109:1102];
      8'd25: c__h1532 = rg_m[1117:1110];
      default: c__h1532 = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1538 or rg_m)
  begin
    case (x__h1538)
      8'd0: c__h1509 = rg_m[216:209];
      8'd1: c__h1509 = rg_m[225:218];
      8'd2: c__h1509 = rg_m[234:227];
      8'd3: c__h1509 = rg_m[243:236];
      8'd4: c__h1509 = rg_m[252:245];
      8'd5: c__h1509 = rg_m[261:254];
      8'd6: c__h1509 = rg_m[270:263];
      8'd7: c__h1509 = rg_m[279:272];
      8'd8: c__h1509 = rg_m[288:281];
      8'd9: c__h1509 = rg_m[297:290];
      8'd10: c__h1509 = rg_m[306:299];
      8'd11: c__h1509 = rg_m[315:308];
      8'd12: c__h1509 = rg_m[324:317];
      8'd13: c__h1509 = rg_m[333:326];
      8'd14: c__h1509 = rg_m[342:335];
      8'd15: c__h1509 = rg_m[351:344];
      8'd16: c__h1509 = rg_m[360:353];
      8'd17: c__h1509 = rg_m[369:362];
      8'd18: c__h1509 = rg_m[378:371];
      8'd19: c__h1509 = rg_m[387:380];
      8'd20: c__h1509 = rg_m[396:389];
      8'd21: c__h1509 = rg_m[405:398];
      8'd22: c__h1509 = rg_m[414:407];
      8'd23: c__h1509 = rg_m[423:416];
      8'd24: c__h1509 = rg_m[432:425];
      8'd25: c__h1509 = rg_m[441:434];
      default: c__h1509 = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1515 or rg_m)
  begin
    case (x__h1515)
      8'd0: c__h1486 = rg_m[450:443];
      8'd1: c__h1486 = rg_m[459:452];
      8'd2: c__h1486 = rg_m[468:461];
      8'd3: c__h1486 = rg_m[477:470];
      8'd4: c__h1486 = rg_m[486:479];
      8'd5: c__h1486 = rg_m[495:488];
      8'd6: c__h1486 = rg_m[504:497];
      8'd7: c__h1486 = rg_m[513:506];
      8'd8: c__h1486 = rg_m[522:515];
      8'd9: c__h1486 = rg_m[531:524];
      8'd10: c__h1486 = rg_m[540:533];
      8'd11: c__h1486 = rg_m[549:542];
      8'd12: c__h1486 = rg_m[558:551];
      8'd13: c__h1486 = rg_m[567:560];
      8'd14: c__h1486 = rg_m[576:569];
      8'd15: c__h1486 = rg_m[585:578];
      8'd16: c__h1486 = rg_m[594:587];
      8'd17: c__h1486 = rg_m[603:596];
      8'd18: c__h1486 = rg_m[612:605];
      8'd19: c__h1486 = rg_m[621:614];
      8'd20: c__h1486 = rg_m[630:623];
      8'd21: c__h1486 = rg_m[639:632];
      8'd22: c__h1486 = rg_m[648:641];
      8'd23: c__h1486 = rg_m[657:650];
      8'd24: c__h1486 = rg_m[666:659];
      8'd25: c__h1486 = rg_m[675:668];
      default: c__h1486 = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1492 or rg_m)
  begin
    case (x__h1492)
      8'd0: c__h1264 = rg_m[684:677];
      8'd1: c__h1264 = rg_m[693:686];
      8'd2: c__h1264 = rg_m[702:695];
      8'd3: c__h1264 = rg_m[711:704];
      8'd4: c__h1264 = rg_m[720:713];
      8'd5: c__h1264 = rg_m[729:722];
      8'd6: c__h1264 = rg_m[738:731];
      8'd7: c__h1264 = rg_m[747:740];
      8'd8: c__h1264 = rg_m[756:749];
      8'd9: c__h1264 = rg_m[765:758];
      8'd10: c__h1264 = rg_m[774:767];
      8'd11: c__h1264 = rg_m[783:776];
      8'd12: c__h1264 = rg_m[792:785];
      8'd13: c__h1264 = rg_m[801:794];
      8'd14: c__h1264 = rg_m[810:803];
      8'd15: c__h1264 = rg_m[819:812];
      8'd16: c__h1264 = rg_m[828:821];
      8'd17: c__h1264 = rg_m[837:830];
      8'd18: c__h1264 = rg_m[846:839];
      8'd19: c__h1264 = rg_m[855:848];
      8'd20: c__h1264 = rg_m[864:857];
      8'd21: c__h1264 = rg_m[873:866];
      8'd22: c__h1264 = rg_m[882:875];
      8'd23: c__h1264 = rg_m[891:884];
      8'd24: c__h1264 = rg_m[900:893];
      8'd25: c__h1264 = rg_m[909:902];
      default: c__h1264 = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1266 or rg_m)
  begin
    case (x__h1266)
      8'd0: c__h1097 = rg_m[7:0];
      8'd1: c__h1097 = rg_m[15:8];
      8'd2: c__h1097 = rg_m[23:16];
      8'd3: c__h1097 = rg_m[31:24];
      8'd4: c__h1097 = rg_m[39:32];
      8'd5: c__h1097 = rg_m[47:40];
      8'd6: c__h1097 = rg_m[55:48];
      8'd7: c__h1097 = rg_m[63:56];
      8'd8: c__h1097 = rg_m[71:64];
      8'd9: c__h1097 = rg_m[79:72];
      8'd10: c__h1097 = rg_m[87:80];
      8'd11: c__h1097 = rg_m[95:88];
      8'd12: c__h1097 = rg_m[103:96];
      8'd13: c__h1097 = rg_m[111:104];
      8'd14: c__h1097 = rg_m[119:112];
      8'd15: c__h1097 = rg_m[127:120];
      8'd16: c__h1097 = rg_m[135:128];
      8'd17: c__h1097 = rg_m[143:136];
      8'd18: c__h1097 = rg_m[151:144];
      8'd19: c__h1097 = rg_m[159:152];
      8'd20: c__h1097 = rg_m[167:160];
      8'd21: c__h1097 = rg_m[175:168];
      8'd22: c__h1097 = rg_m[183:176];
      8'd23: c__h1097 = rg_m[191:184];
      8'd24: c__h1097 = rg_m[199:192];
      8'd25: c__h1097 = rg_m[207:200];
      default: c__h1097 = 8'b10101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rotor_clicks_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rotor_clicks_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rotor_clicks_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rotor_clicks_0$EN)
	  rotor_clicks_0 <= `BSV_ASSIGNMENT_DELAY rotor_clicks_0$D_IN;
	if (rotor_clicks_1$EN)
	  rotor_clicks_1 <= `BSV_ASSIGNMENT_DELAY rotor_clicks_1$D_IN;
	if (rotor_clicks_2$EN)
	  rotor_clicks_2 <= `BSV_ASSIGNMENT_DELAY rotor_clicks_2$D_IN;
      end
    if (rg_m$EN) rg_m <= `BSV_ASSIGNMENT_DELAY rg_m$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_m =
	1118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rotor_clicks_0 = 1'h0;
    rotor_clicks_1 = 1'h0;
    rotor_clicks_2 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkModelEnigma

